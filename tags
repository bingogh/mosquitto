!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AI_ADDRCONFIG	./lib/net_mosq.c	55;"	d	file:
BUFLEN	./src/sys_tree.c	40;"	d	file:
COMPAT_CLOSE	./lib/net_mosq.h	41;"	d
COMPAT_ECONNRESET	./lib/net_mosq.h	42;"	d
COMPAT_EWOULDBLOCK	./lib/net_mosq.h	43;"	d
CONNACK	./lib/mqtt3_protocol.h	40;"	d
CONNACK_ACCEPTED	./lib/mqtt3_protocol.h	54;"	d
CONNACK_REFUSED_BAD_USERNAME_PASSWORD	./lib/mqtt3_protocol.h	58;"	d
CONNACK_REFUSED_IDENTIFIER_REJECTED	./lib/mqtt3_protocol.h	56;"	d
CONNACK_REFUSED_NOT_AUTHORIZED	./lib/mqtt3_protocol.h	59;"	d
CONNACK_REFUSED_PROTOCOL_VERSION	./lib/mqtt3_protocol.h	55;"	d
CONNACK_REFUSED_SERVER_UNAVAILABLE	./lib/mqtt3_protocol.h	57;"	d
CONNECT	./lib/mqtt3_protocol.h	39;"	d
DB_CHUNK_CFG	./src/persist.h	37;"	d
DB_CHUNK_CLIENT	./src/persist.h	42;"	d
DB_CHUNK_CLIENT_MSG	./src/persist.h	39;"	d
DB_CHUNK_MSG_STORE	./src/persist.h	38;"	d
DB_CHUNK_RETAIN	./src/persist.h	40;"	d
DB_CHUNK_SUB	./src/persist.h	41;"	d
DECLTYPE	./src/uthash.h	37;"	d
DECLTYPE	./src/uthash.h	40;"	d
DECLTYPE	./src/uthash.h	43;"	d
DECLTYPE_ASSIGN	./src/uthash.h	47;"	d
DECLTYPE_ASSIGN	./src/uthash.h	53;"	d
DISCONNECT	./lib/mqtt3_protocol.h	52;"	d
ELMT_FROM_HH	./src/uthash.h	92;"	d
FUNC_auth_plugin_acl_check	./src/security.c	/^typedef int (*FUNC_auth_plugin_acl_check)(void *, const char *, const char *, const char *, int);$/;"	t	file:
FUNC_auth_plugin_cleanup	./src/security.c	/^typedef int (*FUNC_auth_plugin_cleanup)(void *, struct mosquitto_auth_opt *, int);$/;"	t	file:
FUNC_auth_plugin_init	./src/security.c	/^typedef int (*FUNC_auth_plugin_init)(void **, struct mosquitto_auth_opt *, int);$/;"	t	file:
FUNC_auth_plugin_security_cleanup	./src/security.c	/^typedef int (*FUNC_auth_plugin_security_cleanup)(void *, struct mosquitto_auth_opt *, int, bool);$/;"	t	file:
FUNC_auth_plugin_security_init	./src/security.c	/^typedef int (*FUNC_auth_plugin_security_init)(void *, struct mosquitto_auth_opt *, int, bool);$/;"	t	file:
FUNC_auth_plugin_unpwd_check	./src/security.c	/^typedef int (*FUNC_auth_plugin_unpwd_check)(void *, const char *, const char *);$/;"	t	file:
FUNC_auth_plugin_version	./src/security.c	/^typedef int (*FUNC_auth_plugin_version)(void);$/;"	t	file:
HASH_ADD	./src/uthash.h	160;"	d
HASH_ADD_INT	./src/uthash.h	260;"	d
HASH_ADD_KEYPTR	./src/uthash.h	173;"	d
HASH_ADD_PTR	./src/uthash.h	266;"	d
HASH_ADD_STR	./src/uthash.h	254;"	d
HASH_ADD_TO_BKT	./src/uthash.h	611;"	d
HASH_BER	./src/uthash.h	355;"	d
HASH_BKT_CAPACITY_THRESH	./src/uthash.h	89;"	d
HASH_BLOOM_ADD	./src/uthash.h	127;"	d
HASH_BLOOM_ADD	./src/uthash.h	136;"	d
HASH_BLOOM_BITLEN	./src/uthash.h	108;"	d
HASH_BLOOM_BITSET	./src/uthash.h	124;"	d
HASH_BLOOM_BITTEST	./src/uthash.h	125;"	d
HASH_BLOOM_BYTELEN	./src/uthash.h	109;"	d
HASH_BLOOM_BYTELEN	./src/uthash.h	138;"	d
HASH_BLOOM_FREE	./src/uthash.h	119;"	d
HASH_BLOOM_FREE	./src/uthash.h	135;"	d
HASH_BLOOM_MAKE	./src/uthash.h	110;"	d
HASH_BLOOM_MAKE	./src/uthash.h	134;"	d
HASH_BLOOM_SIGNATURE	./src/uthash.h	902;"	d
HASH_BLOOM_TEST	./src/uthash.h	130;"	d
HASH_BLOOM_TEST	./src/uthash.h	137;"	d
HASH_CLEAR	./src/uthash.h	849;"	d
HASH_CNT	./src/uthash.h	878;"	d
HASH_COUNT	./src/uthash.h	877;"	d
HASH_DEL	./src/uthash.h	270;"	d
HASH_DELETE	./src/uthash.h	215;"	d
HASH_DEL_IN_BKT	./src/uthash.h	625;"	d
HASH_EMIT_KEY	./src/uthash.h	337;"	d
HASH_EMIT_KEY	./src/uthash.h	344;"	d
HASH_EXPAND_BUCKETS	./src/uthash.h	666;"	d
HASH_FCN	./src/uthash.h	349;"	d
HASH_FCN	./src/uthash.h	351;"	d
HASH_FIND	./src/uthash.h	94;"	d
HASH_FIND_INT	./src/uthash.h	258;"	d
HASH_FIND_IN_BKT	./src/uthash.h	597;"	d
HASH_FIND_PTR	./src/uthash.h	264;"	d
HASH_FIND_STR	./src/uthash.h	252;"	d
HASH_FNV	./src/uthash.h	377;"	d
HASH_FSCK	./src/uthash.h	278;"	d
HASH_FSCK	./src/uthash.h	330;"	d
HASH_INITIAL_NUM_BUCKETS	./src/uthash.h	87;"	d
HASH_INITIAL_NUM_BUCKETS_LOG2	./src/uthash.h	88;"	d
HASH_ITER	./src/uthash.h	867;"	d
HASH_ITER	./src/uthash.h	871;"	d
HASH_JEN	./src/uthash.h	416;"	d
HASH_JEN_MIX	./src/uthash.h	403;"	d
HASH_KEYCMP	./src/uthash.h	594;"	d
HASH_MAKE_TABLE	./src/uthash.h	141;"	d
HASH_MUR	./src/uthash.h	554;"	d
HASH_OAT	./src/uthash.h	387;"	d
HASH_OOPS	./src/uthash.h	277;"	d
HASH_OVERHEAD	./src/uthash.h	860;"	d
HASH_REPLACE	./src/uthash.h	163;"	d
HASH_REPLACE_INT	./src/uthash.h	262;"	d
HASH_REPLACE_PTR	./src/uthash.h	268;"	d
HASH_REPLACE_STR	./src/uthash.h	256;"	d
HASH_SAX	./src/uthash.h	367;"	d
HASH_SELECT	./src/uthash.h	811;"	d
HASH_SFH	./src/uthash.h	468;"	d
HASH_SIGNATURE	./src/uthash.h	901;"	d
HASH_SORT	./src/uthash.h	718;"	d
HASH_SRT	./src/uthash.h	719;"	d
HASH_TO_BKT	./src/uthash.h	198;"	d
HAVE_PSELECT	./lib/mosquitto.c	53;"	d	file:
INVALID_SOCKET	./lib/net_mosq.h	48;"	d
LIBMOSQUITTO_MAJOR	./lib/mosquitto.h	50;"	d
LIBMOSQUITTO_MINOR	./lib/mosquitto.h	51;"	d
LIBMOSQUITTO_REVISION	./lib/mosquitto.h	52;"	d
LIBMOSQUITTO_VERSION_NUMBER	./lib/mosquitto.h	54;"	d
LIB_CLOSE	./src/lib_load.h	36;"	d
LIB_LOAD	./src/lib_load.h	35;"	d
LIB_LOAD_H	./src/lib_load.h	31;"	d
LIB_SYM	./src/lib_load.h	37;"	d
LIB_SYM_EASY	./src/lib_load.h	39;"	d
MAX_BUFFER_LEN	./src/mosquitto_passwd.c	43;"	d	file:
MESSAGE_COUNT	./test/msgsps_common.h	1;"	d
MESSAGE_SIZE	./test/msgsps_common.h	2;"	d
MOSQUITTO_PLUGIN_H	./src/mosquitto_plugin.h	31;"	d
MOSQ_ACL_NONE	./src/mosquitto_plugin.h	35;"	d
MOSQ_ACL_READ	./src/mosquitto_plugin.h	36;"	d
MOSQ_ACL_WRITE	./src/mosquitto_plugin.h	37;"	d
MOSQ_AUTH_PLUGIN_VERSION	./src/mosquitto_plugin.h	33;"	d
MOSQ_DB_VERSION	./src/persist.h	33;"	d
MOSQ_ERR_ACL_DENIED	./lib/mosquitto.h	/^	MOSQ_ERR_ACL_DENIED = 12,$/;"	e	enum:mosq_err_t
MOSQ_ERR_AUTH	./lib/mosquitto.h	/^	MOSQ_ERR_AUTH = 11,$/;"	e	enum:mosq_err_t
MOSQ_ERR_CONN_LOST	./lib/mosquitto.h	/^	MOSQ_ERR_CONN_LOST = 7,$/;"	e	enum:mosq_err_t
MOSQ_ERR_CONN_PENDING	./lib/mosquitto.h	/^	MOSQ_ERR_CONN_PENDING = -1,$/;"	e	enum:mosq_err_t
MOSQ_ERR_CONN_REFUSED	./lib/mosquitto.h	/^	MOSQ_ERR_CONN_REFUSED = 5,$/;"	e	enum:mosq_err_t
MOSQ_ERR_EAI	./lib/mosquitto.h	/^	MOSQ_ERR_EAI = 15$/;"	e	enum:mosq_err_t
MOSQ_ERR_ERRNO	./lib/mosquitto.h	/^	MOSQ_ERR_ERRNO = 14,$/;"	e	enum:mosq_err_t
MOSQ_ERR_INVAL	./lib/mosquitto.h	/^	MOSQ_ERR_INVAL = 3,$/;"	e	enum:mosq_err_t
MOSQ_ERR_NOMEM	./lib/mosquitto.h	/^	MOSQ_ERR_NOMEM = 1,$/;"	e	enum:mosq_err_t
MOSQ_ERR_NOT_FOUND	./lib/mosquitto.h	/^	MOSQ_ERR_NOT_FOUND = 6,$/;"	e	enum:mosq_err_t
MOSQ_ERR_NOT_SUPPORTED	./lib/mosquitto.h	/^	MOSQ_ERR_NOT_SUPPORTED = 10,$/;"	e	enum:mosq_err_t
MOSQ_ERR_NO_CONN	./lib/mosquitto.h	/^	MOSQ_ERR_NO_CONN = 4,$/;"	e	enum:mosq_err_t
MOSQ_ERR_PAYLOAD_SIZE	./lib/mosquitto.h	/^	MOSQ_ERR_PAYLOAD_SIZE = 9,$/;"	e	enum:mosq_err_t
MOSQ_ERR_PROTOCOL	./lib/mosquitto.h	/^	MOSQ_ERR_PROTOCOL = 2,$/;"	e	enum:mosq_err_t
MOSQ_ERR_SUCCESS	./lib/mosquitto.h	/^	MOSQ_ERR_SUCCESS = 0,$/;"	e	enum:mosq_err_t
MOSQ_ERR_TLS	./lib/mosquitto.h	/^	MOSQ_ERR_TLS = 8,$/;"	e	enum:mosq_err_t
MOSQ_ERR_UNKNOWN	./lib/mosquitto.h	/^	MOSQ_ERR_UNKNOWN = 13,$/;"	e	enum:mosq_err_t
MOSQ_LOG_ALL	./lib/mosquitto.h	65;"	d
MOSQ_LOG_DEBUG	./lib/mosquitto.h	62;"	d
MOSQ_LOG_ERR	./lib/mosquitto.h	61;"	d
MOSQ_LOG_INFO	./lib/mosquitto.h	58;"	d
MOSQ_LOG_NONE	./lib/mosquitto.h	57;"	d
MOSQ_LOG_NOTICE	./lib/mosquitto.h	59;"	d
MOSQ_LOG_SUBSCRIBE	./lib/mosquitto.h	63;"	d
MOSQ_LOG_UNSUBSCRIBE	./lib/mosquitto.h	64;"	d
MOSQ_LOG_WARNING	./lib/mosquitto.h	60;"	d
MOSQ_LSB	./lib/net_mosq.h	53;"	d
MOSQ_MQTT_ID_MAX_LENGTH	./lib/mosquitto.h	89;"	d
MOSQ_MSB	./lib/net_mosq.h	52;"	d
MQTT3_H	./src/mosquitto_broker.h	31;"	d
MQTT3_LOG_ALL	./src/mosquitto_broker.h	50;"	d
MQTT3_LOG_FILE	./src/mosquitto_broker.h	46;"	d
MQTT3_LOG_NONE	./src/mosquitto_broker.h	45;"	d
MQTT3_LOG_STDERR	./src/mosquitto_broker.h	48;"	d
MQTT3_LOG_STDOUT	./src/mosquitto_broker.h	47;"	d
MQTT3_LOG_TOPIC	./src/mosquitto_broker.h	49;"	d
MQTT_MAX_PAYLOAD	./lib/mqtt3_protocol.h	61;"	d
MSGMODE_CMD	./client/pub_client.c	41;"	d	file:
MSGMODE_FILE	./client/pub_client.c	44;"	d	file:
MSGMODE_NONE	./client/pub_client.c	40;"	d	file:
MSGMODE_NULL	./client/pub_client.c	45;"	d	file:
MSGMODE_STDIN_FILE	./client/pub_client.c	43;"	d	file:
MSGMODE_STDIN_LINE	./client/pub_client.c	42;"	d	file:
MUR_FMIX	./src/uthash.h	545;"	d
MUR_GETBLOCK	./src/uthash.h	523;"	d
MUR_GETBLOCK	./src/uthash.h	539;"	d
MUR_ONE_THREE	./src/uthash.h	533;"	d
MUR_ONE_THREE	./src/uthash.h	537;"	d
MUR_PLUS0_ALIGNED	./src/uthash.h	525;"	d
MUR_PLUS1_ALIGNED	./src/uthash.h	526;"	d
MUR_PLUS2_ALIGNED	./src/uthash.h	527;"	d
MUR_PLUS3_ALIGNED	./src/uthash.h	528;"	d
MUR_ROTL32	./src/uthash.h	544;"	d
MUR_THREE_ONE	./src/uthash.h	531;"	d
MUR_THREE_ONE	./src/uthash.h	535;"	d
MUR_TWO_TWO	./src/uthash.h	532;"	d
MUR_TWO_TWO	./src/uthash.h	536;"	d
NO_DECLTYPE	./src/uthash.h	39;"	d
PERSIST_H	./src/persist.h	31;"	d
PINGREQ	./lib/mqtt3_protocol.h	50;"	d
PINGRESP	./lib/mqtt3_protocol.h	51;"	d
POLLRDHUP	./src/loop.c	48;"	d	file:
PROTOCOL_NAME	./lib/mqtt3_protocol.h	35;"	d
PROTOCOL_VERSION	./lib/mqtt3_protocol.h	36;"	d
PUBACK	./lib/mqtt3_protocol.h	42;"	d
PUBCOMP	./lib/mqtt3_protocol.h	45;"	d
PUBLISH	./lib/mqtt3_protocol.h	41;"	d
PUBREC	./lib/mqtt3_protocol.h	43;"	d
PUBREL	./lib/mqtt3_protocol.h	44;"	d
REAL_WITH_MEMORY_TRACKING	./lib/memory_mosq.h	36;"	d
SALT_LEN	./src/mosquitto_passwd.c	44;"	d	file:
STATUS_CONNACK_RECVD	./client/pub_client.c	48;"	d	file:
STATUS_CONNECTING	./client/pub_client.c	47;"	d	file:
STATUS_WAITING	./client/pub_client.c	49;"	d	file:
SUBACK	./lib/mqtt3_protocol.h	47;"	d
SUBSCRIBE	./lib/mqtt3_protocol.h	46;"	d
TEMPERATURE_CONVERSION_H	./examples/temperature_conversion/temperature_conversion.h	2;"	d
UNSUBACK	./lib/mqtt3_protocol.h	49;"	d
UNSUBSCRIBE	./lib/mqtt3_protocol.h	48;"	d
UTHASH_H	./src/uthash.h	25;"	d
UTHASH_VERSION	./src/uthash.h	67;"	d
UT_hash_bucket	./src/uthash.h	/^typedef struct UT_hash_bucket {$/;"	s
UT_hash_bucket	./src/uthash.h	/^} UT_hash_bucket;$/;"	t	typeref:struct:UT_hash_bucket
UT_hash_handle	./src/uthash.h	/^typedef struct UT_hash_handle {$/;"	s
UT_hash_handle	./src/uthash.h	/^} UT_hash_handle;$/;"	t	typeref:struct:UT_hash_handle
UT_hash_table	./src/uthash.h	/^typedef struct UT_hash_table {$/;"	s
UT_hash_table	./src/uthash.h	/^} UT_hash_table;$/;"	t	typeref:struct:UT_hash_table
WP	./src/uthash.h	529;"	d
_BSD_SOURCE	./src/mosquitto.c	32;"	d	file:
_DUMMYPTHREAD_H_	./lib/dummypthread.h	2;"	d
_GNU_SOURCE	./src/loop.c	30;"	d	file:
_LOGGING_MOSQ_H_	./lib/logging_mosq.h	30;"	d
_MEMORY_MOSQ_H_	./lib/memory_mosq.h	31;"	d
_MESSAGES_MOSQ_H_	./lib/messages_mosq.h	30;"	d
_MOSQUITTOPP_H_	./lib/cpp/mosquittopp.h	38;"	d
_MOSQUITTO_H_	./lib/mosquitto.h	38;"	d
_MOSQUITTO_INTERNAL_H_	./lib/mosquitto_internal.h	31;"	d
_MQTT3_PROTOCOL_H_	./lib/mqtt3_protocol.h	31;"	d
_NET_MOSQ_H_	./lib/net_mosq.h	30;"	d
_READ_HANDLE_H_	./lib/read_handle.h	30;"	d
_SEND_MOSQ_H_	./lib/send_mosq.h	30;"	d
_TIME_MOSQ_H_	./lib/time_mosq.h	31;"	d
_UTIL_MOSQ_H_	./lib/util_mosq.h	30;"	d
_WILL_MOSQ_H_	./lib/will_mosq.h	31;"	d
__attribute__	./src/mosquitto_broker.h	41;"	d
_acl_cleanup	./src/security_default.c	/^static int _acl_cleanup(struct mosquitto_db *db, bool reload)$/;"	f	file:
_aclfile_parse	./src/security_default.c	/^static int _aclfile_parse(struct mosquitto_db *db)$/;"	f	file:
_add_acl	./src/security_default.c	/^int _add_acl(struct mosquitto_db *db, const char *user, const char *topic, int access)$/;"	f
_add_acl_pattern	./src/security_default.c	/^int _add_acl_pattern(struct mosquitto_db *db, const char *topic, int access)$/;"	f
_clientid_index_hash	./src/mosquitto_broker.h	/^struct _clientid_index_hash{$/;"	s
_conf_attempt_resolve	./src/conf.c	/^static int _conf_attempt_resolve(const char *host, const char *text, int log, const char *msg)$/;"	f	file:
_conf_parse_bool	./src/conf.c	/^static int _conf_parse_bool(char **token, const char *name, bool *value, char *saveptr)$/;"	f	file:
_conf_parse_int	./src/conf.c	/^static int _conf_parse_int(char **token, const char *name, int *value, char *saveptr)$/;"	f	file:
_conf_parse_string	./src/conf.c	/^static int _conf_parse_string(char **token, const char *name, char **value, char *saveptr)$/;"	f	file:
_config_init_reload	./src/conf.c	/^static void _config_init_reload(struct mqtt3_config *config)$/;"	f	file:
_config_read_file	./src/conf.c	/^int _config_read_file(struct mqtt3_config *config, bool reload, const char *file, struct config_recurse *cr, int level, int *lineno)$/;"	f
_db_client_chunk_restore	./src/db_dump/db_dump.c	/^static int _db_client_chunk_restore(mosquitto_db *db, FILE *db_fd)$/;"	f	file:
_db_client_chunk_restore	./src/persist.c	/^static int _db_client_chunk_restore(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
_db_client_msg_chunk_restore	./src/db_dump/db_dump.c	/^static int _db_client_msg_chunk_restore(mosquitto_db *db, FILE *db_fd)$/;"	f	file:
_db_client_msg_chunk_restore	./src/persist.c	/^static int _db_client_msg_chunk_restore(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
_db_client_msg_restore	./src/persist.c	/^static int _db_client_msg_restore(struct mosquitto_db *db, const char *client_id, uint16_t mid, uint8_t qos, uint8_t retain, uint8_t direction, uint8_t state, uint8_t dup, uint64_t store_id)$/;"	f	file:
_db_find_or_add_context	./src/persist.c	/^static struct mosquitto *_db_find_or_add_context(struct mosquitto_db *db, const char *client_id, uint16_t last_mid)$/;"	f	file:
_db_msg_store_chunk_restore	./src/db_dump/db_dump.c	/^static int _db_msg_store_chunk_restore(mosquitto_db *db, FILE *db_fd)$/;"	f	file:
_db_msg_store_chunk_restore	./src/persist.c	/^static int _db_msg_store_chunk_restore(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
_db_restore_sub	./src/persist.c	/^static int _db_restore_sub(struct mosquitto_db *db, const char *client_id, const char *sub, int qos)$/;"	f	file:
_db_retain_chunk_restore	./src/db_dump/db_dump.c	/^static int _db_retain_chunk_restore(mosquitto_db *db, FILE *db_fd)$/;"	f	file:
_db_retain_chunk_restore	./src/persist.c	/^static int _db_retain_chunk_restore(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
_db_sub_chunk_restore	./src/db_dump/db_dump.c	/^static int _db_sub_chunk_restore(mosquitto_db *db, FILE *db_fd)$/;"	f	file:
_db_sub_chunk_restore	./src/persist.c	/^static int _db_sub_chunk_restore(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
_db_subs_retain_write	./src/persist.c	/^static int _db_subs_retain_write(struct mosquitto_db *db, FILE *db_fptr, struct _mosquitto_subhier *node, const char *topic)$/;"	f	file:
_free_acl	./src/security_default.c	/^static void _free_acl(struct _mosquitto_acl *acl)$/;"	f	file:
_mosquitto_acl	./src/mosquitto_broker.h	/^struct _mosquitto_acl{$/;"	s
_mosquitto_acl_user	./src/mosquitto_broker.h	/^struct _mosquitto_acl_user{$/;"	s
_mosquitto_auth_plugin	./src/mosquitto_broker.h	/^struct _mosquitto_auth_plugin{$/;"	s
_mosquitto_auth_thread_main	./src/auth_thread.c	/^void *_mosquitto_auth_thread_main(void *obj){$/;"	f
_mosquitto_calloc	./lib/memory_mosq.c	/^void *_mosquitto_calloc(size_t nmemb, size_t size)$/;"	f
_mosquitto_check_keepalive	./lib/util_mosq.c	/^void _mosquitto_check_keepalive(struct mosquitto *mosq)$/;"	f
_mosquitto_connect_init	./lib/mosquitto.c	/^static int _mosquitto_connect_init(struct mosquitto *mosq, const char *host, int port, int keepalive, const char *bind_address)$/;"	f	file:
_mosquitto_destroy	./lib/mosquitto.c	/^void _mosquitto_destroy(struct mosquitto *mosq)$/;"	f
_mosquitto_fix_sub_topic	./lib/util_mosq.c	/^int _mosquitto_fix_sub_topic(char **subtopic)$/;"	f
_mosquitto_fopen	./lib/util_mosq.c	/^FILE *_mosquitto_fopen(const char *path, const char *mode)$/;"	f
_mosquitto_free	./lib/memory_mosq.c	/^void _mosquitto_free(void *mem)$/;"	f
_mosquitto_get_db	./src/mosquitto.c	/^struct mosquitto_db *_mosquitto_get_db(void)$/;"	f
_mosquitto_handle_connack	./lib/read_handle_client.c	/^int _mosquitto_handle_connack(struct mosquitto *mosq)$/;"	f
_mosquitto_handle_pingreq	./lib/read_handle_shared.c	/^int _mosquitto_handle_pingreq(struct mosquitto *mosq)$/;"	f
_mosquitto_handle_pingresp	./lib/read_handle_shared.c	/^int _mosquitto_handle_pingresp(struct mosquitto *mosq)$/;"	f
_mosquitto_handle_pubackcomp	./lib/read_handle_shared.c	/^int _mosquitto_handle_pubackcomp(struct mosquitto *mosq, const char *type)$/;"	f
_mosquitto_handle_publish	./lib/read_handle.c	/^int _mosquitto_handle_publish(struct mosquitto *mosq)$/;"	f
_mosquitto_handle_pubrec	./lib/read_handle_shared.c	/^int _mosquitto_handle_pubrec(struct mosquitto *mosq)$/;"	f
_mosquitto_handle_pubrel	./lib/read_handle_shared.c	/^int _mosquitto_handle_pubrel(struct mosquitto_db *db, struct mosquitto *mosq)$/;"	f
_mosquitto_handle_suback	./lib/read_handle_shared.c	/^int _mosquitto_handle_suback(struct mosquitto *mosq)$/;"	f
_mosquitto_handle_unsuback	./lib/read_handle_shared.c	/^int _mosquitto_handle_unsuback(struct mosquitto *mosq)$/;"	f
_mosquitto_log_printf	./lib/logging_mosq.c	/^int _mosquitto_log_printf(struct mosquitto *mosq, int priority, const char *fmt, ...)$/;"	f
_mosquitto_log_printf	./src/logging.c	/^int _mosquitto_log_printf(struct mosquitto *mosq, int priority, const char *fmt, ...)$/;"	f
_mosquitto_loop_rc_handle	./lib/mosquitto.c	/^static int _mosquitto_loop_rc_handle(struct mosquitto *mosq, int rc)$/;"	f	file:
_mosquitto_malloc	./lib/memory_mosq.c	/^void *_mosquitto_malloc(size_t size)$/;"	f
_mosquitto_max_memory_used	./lib/memory_mosq.c	/^unsigned long _mosquitto_max_memory_used(void)$/;"	f
_mosquitto_memory_used	./lib/memory_mosq.c	/^unsigned long _mosquitto_memory_used(void)$/;"	f
_mosquitto_message_cleanup	./lib/messages_mosq.c	/^void _mosquitto_message_cleanup(struct mosquitto_message_all **message)$/;"	f
_mosquitto_message_cleanup_all	./lib/messages_mosq.c	/^void _mosquitto_message_cleanup_all(struct mosquitto *mosq)$/;"	f
_mosquitto_message_delete	./lib/messages_mosq.c	/^int _mosquitto_message_delete(struct mosquitto *mosq, uint16_t mid, enum mosquitto_msg_direction dir)$/;"	f
_mosquitto_message_queue	./lib/messages_mosq.c	/^void _mosquitto_message_queue(struct mosquitto *mosq, struct mosquitto_message_all *message, bool doinc)$/;"	f
_mosquitto_message_remove	./lib/messages_mosq.c	/^int _mosquitto_message_remove(struct mosquitto *mosq, uint16_t mid, enum mosquitto_msg_direction dir, struct mosquitto_message_all **message)$/;"	f
_mosquitto_message_retry_check	./lib/messages_mosq.c	/^void _mosquitto_message_retry_check(struct mosquitto *mosq)$/;"	f
_mosquitto_message_update	./lib/messages_mosq.c	/^int _mosquitto_message_update(struct mosquitto *mosq, uint16_t mid, enum mosquitto_msg_direction dir, enum mosquitto_msg_state state)$/;"	f
_mosquitto_messages_reconnect_reset	./lib/messages_mosq.c	/^void _mosquitto_messages_reconnect_reset(struct mosquitto *mosq)$/;"	f
_mosquitto_mid_generate	./lib/util_mosq.c	/^uint16_t _mosquitto_mid_generate(struct mosquitto *mosq)$/;"	f
_mosquitto_net_read	./lib/net_mosq.c	/^ssize_t _mosquitto_net_read(struct mosquitto *mosq, void *buf, size_t count)$/;"	f
_mosquitto_net_write	./lib/net_mosq.c	/^ssize_t _mosquitto_net_write(struct mosquitto *mosq, void *buf, size_t count)$/;"	f
_mosquitto_packet	./lib/mosquitto_internal.h	/^struct _mosquitto_packet{$/;"	s
_mosquitto_packet_alloc	./lib/util_mosq.c	/^int _mosquitto_packet_alloc(struct _mosquitto_packet *packet)$/;"	f
_mosquitto_packet_cleanup	./lib/net_mosq.c	/^void _mosquitto_packet_cleanup(struct _mosquitto_packet *packet)$/;"	f
_mosquitto_packet_handle	./lib/read_handle.c	/^int _mosquitto_packet_handle(struct mosquitto *mosq)$/;"	f
_mosquitto_packet_queue	./lib/net_mosq.c	/^int _mosquitto_packet_queue(struct mosquitto *mosq, struct _mosquitto_packet *packet)$/;"	f
_mosquitto_packet_read	./lib/net_mosq.c	/^int _mosquitto_packet_read(struct mosquitto_db *db, struct mosquitto *mosq)$/;"	f
_mosquitto_packet_write	./lib/net_mosq.c	/^int _mosquitto_packet_write(struct mosquitto *mosq)$/;"	f
_mosquitto_read_byte	./lib/net_mosq.c	/^int _mosquitto_read_byte(struct _mosquitto_packet *packet, uint8_t *byte)$/;"	f
_mosquitto_read_bytes	./lib/net_mosq.c	/^int _mosquitto_read_bytes(struct _mosquitto_packet *packet, void *bytes, uint32_t count)$/;"	f
_mosquitto_read_string	./lib/net_mosq.c	/^int _mosquitto_read_string(struct _mosquitto_packet *packet, char **str)$/;"	f
_mosquitto_read_uint16	./lib/net_mosq.c	/^int _mosquitto_read_uint16(struct _mosquitto_packet *packet, uint16_t *word)$/;"	f
_mosquitto_realloc	./lib/memory_mosq.c	/^void *_mosquitto_realloc(void *ptr, size_t size)$/;"	f
_mosquitto_reconnect	./lib/mosquitto.c	/^static int _mosquitto_reconnect(struct mosquitto *mosq, bool blocking)$/;"	f	file:
_mosquitto_send_command_with_mid	./lib/send_mosq.c	/^int _mosquitto_send_command_with_mid(struct mosquitto *mosq, uint8_t command, uint16_t mid, bool dup)$/;"	f
_mosquitto_send_connack	./src/send_server.c	/^int _mosquitto_send_connack(struct mosquitto *context, int result)$/;"	f
_mosquitto_send_connect	./lib/send_client_mosq.c	/^int _mosquitto_send_connect(struct mosquitto *mosq, uint16_t keepalive, bool clean_session)$/;"	f
_mosquitto_send_disconnect	./lib/send_client_mosq.c	/^int _mosquitto_send_disconnect(struct mosquitto *mosq)$/;"	f
_mosquitto_send_pingreq	./lib/send_mosq.c	/^int _mosquitto_send_pingreq(struct mosquitto *mosq)$/;"	f
_mosquitto_send_pingresp	./lib/send_mosq.c	/^int _mosquitto_send_pingresp(struct mosquitto *mosq)$/;"	f
_mosquitto_send_puback	./lib/send_mosq.c	/^int _mosquitto_send_puback(struct mosquitto *mosq, uint16_t mid)$/;"	f
_mosquitto_send_pubcomp	./lib/send_mosq.c	/^int _mosquitto_send_pubcomp(struct mosquitto *mosq, uint16_t mid)$/;"	f
_mosquitto_send_publish	./lib/send_mosq.c	/^int _mosquitto_send_publish(struct mosquitto *mosq, uint16_t mid, const char *topic, uint32_t payloadlen, const void *payload, int qos, bool retain, bool dup)$/;"	f
_mosquitto_send_pubrec	./lib/send_mosq.c	/^int _mosquitto_send_pubrec(struct mosquitto *mosq, uint16_t mid)$/;"	f
_mosquitto_send_pubrel	./lib/send_mosq.c	/^int _mosquitto_send_pubrel(struct mosquitto *mosq, uint16_t mid, bool dup)$/;"	f
_mosquitto_send_real_publish	./lib/send_mosq.c	/^int _mosquitto_send_real_publish(struct mosquitto *mosq, uint16_t mid, const char *topic, uint32_t payloadlen, const void *payload, int qos, bool retain, bool dup)$/;"	f
_mosquitto_send_simple_command	./lib/send_mosq.c	/^int _mosquitto_send_simple_command(struct mosquitto *mosq, uint8_t command)$/;"	f
_mosquitto_send_suback	./src/send_server.c	/^int _mosquitto_send_suback(struct mosquitto *context, uint16_t mid, uint32_t payloadlen, const void *payload)$/;"	f
_mosquitto_send_subscribe	./lib/send_client_mosq.c	/^int _mosquitto_send_subscribe(struct mosquitto *mosq, int *mid, bool dup, const char *topic, uint8_t topic_qos)$/;"	f
_mosquitto_send_unsubscribe	./lib/send_client_mosq.c	/^int _mosquitto_send_unsubscribe(struct mosquitto *mosq, int *mid, bool dup, const char *topic)$/;"	f
_mosquitto_socket_close	./lib/net_mosq.c	/^int _mosquitto_socket_close(struct mosquitto *mosq)$/;"	f
_mosquitto_socket_connect	./lib/net_mosq.c	/^int _mosquitto_socket_connect(struct mosquitto *mosq, const char *host, uint16_t port, const char *bind_address, bool blocking)$/;"	f
_mosquitto_socket_get_address	./src/net.c	/^int _mosquitto_socket_get_address(int sock, char *buf, int len)$/;"	f
_mosquitto_strdup	./lib/memory_mosq.c	/^char *_mosquitto_strdup(const char *s)$/;"	f
_mosquitto_subhier	./src/mosquitto_broker.h	/^struct _mosquitto_subhier {$/;"	s
_mosquitto_subleaf	./src/mosquitto_broker.h	/^struct _mosquitto_subleaf {$/;"	s
_mosquitto_thread_main	./lib/thread_mosq.c	/^void *_mosquitto_thread_main(void *obj)$/;"	f
_mosquitto_topic_wildcard_len_check	./lib/util_mosq.c	/^int _mosquitto_topic_wildcard_len_check(const char *str)$/;"	f
_mosquitto_try_connect	./lib/net_mosq.c	/^int _mosquitto_try_connect(const char *host, uint16_t port, int *sock, const char *bind_address, bool blocking)$/;"	f
_mosquitto_unpwd	./src/mosquitto_broker.h	/^struct _mosquitto_unpwd{$/;"	s
_mosquitto_waiting_auth_list	./src/mosquitto_broker.h	/^struct _mosquitto_waiting_auth_list{$/;"	s
_mosquitto_will_clear	./lib/will_mosq.c	/^int _mosquitto_will_clear(struct mosquitto *mosq)$/;"	f
_mosquitto_will_set	./lib/will_mosq.c	/^int _mosquitto_will_set(struct mosquitto *mosq, const char *topic, int payloadlen, const void *payload, int qos, bool retain)$/;"	f
_mosquitto_write_byte	./lib/net_mosq.c	/^void _mosquitto_write_byte(struct _mosquitto_packet *packet, uint8_t byte)$/;"	f
_mosquitto_write_bytes	./lib/net_mosq.c	/^void _mosquitto_write_bytes(struct _mosquitto_packet *packet, const void *bytes, uint32_t count)$/;"	f
_mosquitto_write_string	./lib/net_mosq.c	/^void _mosquitto_write_string(struct _mosquitto_packet *packet, const char *str, uint16_t length)$/;"	f
_mosquitto_write_uint16	./lib/net_mosq.c	/^void _mosquitto_write_uint16(struct _mosquitto_packet *packet, uint16_t word)$/;"	f
_mqtt3_bridge	./src/mosquitto_broker.h	/^struct _mqtt3_bridge{$/;"	s
_mqtt3_bridge_topic	./src/mosquitto_broker.h	/^struct _mqtt3_bridge_topic{$/;"	s
_mqtt3_listener	./src/mosquitto_broker.h	/^struct _mqtt3_listener {$/;"	s
_pwfile_parse	./src/security_default.c	/^static int _pwfile_parse(const char *file, struct _mosquitto_unpwd **root)$/;"	f	file:
_retain_process	./src/subs.c	/^static int _retain_process(struct mosquitto_db *db, struct mosquitto_msg_store *retained, struct mosquitto *context, const char *sub, int sub_qos)$/;"	f	file:
_retain_search	./src/subs.c	/^static int _retain_search(struct mosquitto_db *db, struct _mosquitto_subhier *subhier, struct _sub_token *tokens, struct mosquitto *context, const char *sub, int sub_qos, int level)$/;"	f	file:
_sub_add	./src/subs.c	/^static int _sub_add(struct mosquitto_db *db, struct mosquitto *context, int qos, struct _mosquitto_subhier *subhier, struct _sub_token *tokens)$/;"	f	file:
_sub_remove	./src/subs.c	/^static int _sub_remove(struct mosquitto_db *db, struct mosquitto *context, struct _mosquitto_subhier *subhier, struct _sub_token *tokens)$/;"	f	file:
_sub_search	./src/subs.c	/^static int _sub_search(struct mosquitto_db *db, struct _mosquitto_subhier *subhier, struct _sub_token *tokens, const char *source_id, const char *topic, int qos, int retain, struct mosquitto_msg_store *stored, bool set_retain)$/;"	f	file:
_sub_token	./src/subs.c	/^struct _sub_token {$/;"	s	file:
_sub_topic_tokenise	./src/subs.c	/^static int _sub_topic_tokenise(const char *subtopic, struct _sub_token **topics)$/;"	f	file:
_subs_clean_session	./src/subs.c	/^static int _subs_clean_session(struct mosquitto_db *db, struct mosquitto *context, struct _mosquitto_subhier *root)$/;"	f	file:
_subs_process	./src/subs.c	/^static int _subs_process(struct mosquitto_db *db, struct _mosquitto_subhier *hier, const char *source_id, const char *topic, int qos, int retain, struct mosquitto_msg_store *stored, bool set_retain)$/;"	f	file:
_sys_update_clients	./src/sys_tree.c	/^static void _sys_update_clients(struct mosquitto_db *db, char *buf)$/;"	f	file:
_sys_update_memory	./src/sys_tree.c	/^static void _sys_update_memory(struct mosquitto_db *db, char *buf)$/;"	f	file:
_unpwd_cleanup	./src/security_default.c	/^static int _unpwd_cleanup(struct _mosquitto_unpwd **root, bool reload)$/;"	f	file:
_unpwd_file_parse	./src/security_default.c	/^static int _unpwd_file_parse(struct mosquitto_db *db)$/;"	f	file:
access	./src/mosquitto_broker.h	/^	int access;$/;"	m	struct:_mosquitto_acl
acl	./src/mosquitto_broker.h	/^	struct _mosquitto_acl *acl;$/;"	m	struct:_mosquitto_acl_user	typeref:struct:_mosquitto_acl_user::_mosquitto_acl
acl_check	./src/mosquitto_broker.h	/^	int (*acl_check)(void *user_data, const char *clientid, const char *username, const char *topic, int access);$/;"	m	struct:_mosquitto_auth_plugin
acl_file	./src/mosquitto_broker.h	/^	char *acl_file;$/;"	m	struct:mqtt3_config
acl_list	./lib/mosquitto_internal.h	/^	struct _mosquitto_acl_user *acl_list;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::_mosquitto_acl_user
acl_list	./src/mosquitto_broker.h	/^	struct _mosquitto_acl_user *acl_list;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::_mosquitto_acl_user
acl_patterns	./src/mosquitto_broker.h	/^	struct _mosquitto_acl *acl_patterns;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::_mosquitto_acl
address	./lib/mosquitto_internal.h	/^	char *address;$/;"	m	struct:mosquitto
address	./src/mosquitto_broker.h	/^	char *address;$/;"	m	struct:bridge_address
address_count	./src/mosquitto_broker.h	/^	int address_count;$/;"	m	struct:_mqtt3_bridge
addresses	./src/mosquitto_broker.h	/^	struct bridge_address *addresses;$/;"	m	struct:_mqtt3_bridge	typeref:struct:_mqtt3_bridge::bridge_address
allow_anonymous	./src/mosquitto_broker.h	/^	bool allow_anonymous;\/\/是否允许免密码登陆使用$/;"	m	struct:mqtt3_config
allow_duplicate_messages	./src/mosquitto_broker.h	/^	bool allow_duplicate_messages;$/;"	m	struct:mqtt3_config
auth_option_count	./src/mosquitto_broker.h	/^	int auth_option_count;$/;"	m	struct:mqtt3_config
auth_options	./src/mosquitto_broker.h	/^	struct mosquitto_auth_opt *auth_options;$/;"	m	struct:mqtt3_config	typeref:struct:mqtt3_config::mosquitto_auth_opt
auth_plugin	./src/mosquitto_broker.h	/^	char *auth_plugin;$/;"	m	struct:mqtt3_config
auth_plugin	./src/mosquitto_broker.h	/^	struct _mosquitto_auth_plugin auth_plugin;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::_mosquitto_auth_plugin
auth_result	./lib/mosquitto_internal.h	/^	int auth_result ;$/;"	m	struct:mosquitto
auth_thread_destroy	./src/auth_thread.c	/^int auth_thread_destroy(struct mosquitto_db *db){$/;"	f
auth_thread_id	./src/mosquitto_broker.h	/^	pthread_t auth_thread_id ;$/;"	m	struct:mosquitto_db
auth_thread_init	./src/auth_thread.c	/^int auth_thread_init(struct mosquitto_db *db){$/;"	f
autosave_interval	./src/mosquitto_broker.h	/^	int autosave_interval;\/\/自动保存db文件持久化的间隔时间或者最大累积条数，依赖autosave_on_changes$/;"	m	struct:mqtt3_config
autosave_on_changes	./src/mosquitto_broker.h	/^	bool autosave_on_changes;\/\/如果设置了，那么累积autosave_interval这么多条数据后，会持久化，否则autosave_interval就是保存间隔时间$/;"	m	struct:mqtt3_config
base64_encode	./src/mosquitto_passwd.c	/^int base64_encode(unsigned char *in, unsigned int in_len, char **encoded)$/;"	f
bd_both	./src/mosquitto_broker.h	/^	bd_both = 2$/;"	e	enum:mqtt3_bridge_direction
bd_in	./src/mosquitto_broker.h	/^	bd_in = 1,$/;"	e	enum:mqtt3_bridge_direction
bd_out	./src/mosquitto_broker.h	/^	bd_out = 0,$/;"	e	enum:mqtt3_bridge_direction
bind_address	./lib/mosquitto_internal.h	/^	char *bind_address;$/;"	m	struct:mosquitto
bloom_bv	./src/uthash.h	/^   uint8_t *bloom_bv;$/;"	m	struct:UT_hash_table
bloom_nbits	./src/uthash.h	/^   char bloom_nbits;$/;"	m	struct:UT_hash_table
bloom_sig	./src/uthash.h	/^   uint32_t bloom_sig; \/* used only to test bloom exists in external analysis *\/$/;"	m	struct:UT_hash_table
bridge	./lib/mosquitto_internal.h	/^	struct _mqtt3_bridge *bridge;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::_mqtt3_bridge
bridge_address	./src/mosquitto_broker.h	/^struct bridge_address{$/;"	s
bst_automatic	./src/mosquitto_broker.h	/^	bst_automatic = 0,$/;"	e	enum:mosquitto_bridge_start_type
bst_lazy	./src/mosquitto_broker.h	/^	bst_lazy = 1,$/;"	e	enum:mosquitto_bridge_start_type
bst_manual	./src/mosquitto_broker.h	/^	bst_manual = 2,$/;"	e	enum:mosquitto_bridge_start_type
bst_once	./src/mosquitto_broker.h	/^	bst_once = 3$/;"	e	enum:mosquitto_bridge_start_type
buckets	./src/uthash.h	/^   UT_hash_bucket *buckets;$/;"	m	struct:UT_hash_table
calc_load	./src/sys_tree.c	/^static void calc_load(struct mosquitto_db *db, char *buf, const char *topic, double exponent, double interval, double *current)$/;"	f	file:
callback_mutex	./lib/mosquitto_internal.h	/^	pthread_mutex_t callback_mutex;$/;"	m	struct:mosquitto
child	./src/mosquitto_broker.h	/^	struct _mosquitto_acl *child;$/;"	m	struct:_mosquitto_acl	typeref:struct:_mosquitto_acl::_mosquitto_acl
children	./src/mosquitto_broker.h	/^	struct _mosquitto_subhier *children;\/\/这个节点的下一级节点链表$/;"	m	struct:_mosquitto_subhier	typeref:struct:_mosquitto_subhier::_mosquitto_subhier
clean_session	./lib/mosquitto_internal.h	/^	bool clean_session;$/;"	m	struct:mosquitto
clean_session	./src/mosquitto_broker.h	/^	bool clean_session;$/;"	m	struct:_mqtt3_bridge
client_count	./src/mosquitto_broker.h	/^	int client_count;\/\/这个listener上面的客户连接数目$/;"	m	struct:_mqtt3_listener
clientid	./src/mosquitto_broker.h	/^	char *clientid;$/;"	m	struct:_mqtt3_bridge
clientid_index_hash	./src/mosquitto_broker.h	/^	struct _clientid_index_hash *clientid_index_hash;\/\/所有客户端id的哈希表,用来快速找到这个客户端在db->contexts数组中的位置的$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::_clientid_index_hash
clientid_prefixes	./src/mosquitto_broker.h	/^	char *clientid_prefixes;$/;"	m	struct:mqtt3_config
command	./lib/mosquitto_internal.h	/^	uint8_t command;\/\/4 Message Type|1 DUP flag|2 QoS level|1 RETAIN$/;"	m	struct:_mosquitto_packet
complete	./test/qos.c	/^	bool complete;$/;"	m	struct:sub	file:
config	./src/mosquitto_broker.h	/^	struct mqtt3_config *config;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::mqtt3_config
config_file	./src/mosquitto_broker.h	/^	char *config_file;$/;"	m	struct:mqtt3_config
config_recurse	./src/conf.c	/^struct config_recurse {$/;"	s	file:
connect_callback	./examples/mysql_log/mysql_log.c	/^void connect_callback(struct mosquitto *mosq, void *obj, int result)$/;"	f
connected	./client/pub_client.c	/^static bool connected = true;$/;"	v	file:
connection_messages	./src/mosquitto_broker.h	/^	bool connection_messages;$/;"	m	struct:mqtt3_config
context	./src/mosquitto_broker.h	/^	struct mosquitto *context ;$/;"	m	struct:_mosquitto_waiting_auth_list	typeref:struct:_mosquitto_waiting_auth_list::mosquitto
context	./src/mosquitto_broker.h	/^	struct mosquitto *context;\/\/指向订阅的客户端连接，$/;"	m	struct:_mosquitto_subleaf	typeref:struct:_mosquitto_subleaf::mosquitto
context_count	./src/mosquitto_broker.h	/^	int context_count;$/;"	m	struct:mosquitto_db
contexts	./src/mosquitto_broker.h	/^	struct mosquitto **contexts;\/\/注意这个地方会不断变化，所以不要指向这个数组$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::mosquitto
copy_contents	./src/mosquitto_passwd.c	/^int copy_contents(FILE *src, FILE *dest)$/;"	f
count	./src/uthash.h	/^   unsigned count;$/;"	m	struct:UT_hash_bucket
create_backup	./src/mosquitto_passwd.c	/^int create_backup(const char *backup_file, FILE *fptr)$/;"	f
create_data	./test/msgsps_pub.c	/^int create_data(void)$/;"	f
cur_address	./src/mosquitto_broker.h	/^	int cur_address;$/;"	m	struct:_mqtt3_bridge
current_out_packet	./lib/mosquitto_internal.h	/^	struct _mosquitto_packet *current_out_packet;\/\/当前正在发送中的数据包，可能只发送了一部分$/;"	m	struct:mosquitto	typeref:struct:mosquitto::_mosquitto_packet
current_out_packet_mutex	./lib/mosquitto_internal.h	/^	pthread_mutex_t current_out_packet_mutex;$/;"	m	struct:mosquitto
daemon	./src/mosquitto_broker.h	/^	bool daemon;$/;"	m	struct:mqtt3_config
db_context_index	./src/mosquitto_broker.h	/^	int db_context_index;$/;"	m	struct:_clientid_index_hash
db_database	./examples/mysql_log/mysql_log.c	13;"	d	file:
db_host	./examples/mysql_log/mysql_log.c	10;"	d	file:
db_id	./src/mosquitto_broker.h	/^	dbid_t db_id;$/;"	m	struct:mosquitto_msg_store
db_index	./lib/mosquitto_internal.h	/^	int db_index;\/\/记住我在db->contexts中的下标$/;"	m	struct:mosquitto
db_password	./examples/mysql_log/mysql_log.c	12;"	d	file:
db_port	./examples/mysql_log/mysql_log.c	14;"	d	file:
db_query	./examples/mysql_log/mysql_log.c	16;"	d	file:
db_username	./examples/mysql_log/mysql_log.c	11;"	d	file:
db_version	./src/db_dump/db_dump.c	/^static uint32_t db_version;$/;"	v	file:
db_version	./src/persist.c	/^static uint32_t db_version;$/;"	v	file:
dbid_t	./src/mosquitto_broker.h	/^typedef uint64_t dbid_t;$/;"	t
default_listener	./src/mosquitto_broker.h	/^	struct _mqtt3_listener default_listener;$/;"	m	struct:mqtt3_config	typeref:struct:mqtt3_config::_mqtt3_listener
delete_pwuser	./src/mosquitto_passwd.c	/^int delete_pwuser(FILE *fptr, FILE *ftmp, const char *username)$/;"	f
dest_id_count	./src/mosquitto_broker.h	/^	int dest_id_count;$/;"	m	struct:mosquitto_msg_store
dest_ids	./src/mosquitto_broker.h	/^	char **dest_ids;\/\/这条消息已经送达的id列表，配置allow_duplicate_messages了的话，这里就有用了$/;"	m	struct:mosquitto_msg_store
direction	./lib/mosquitto_internal.h	/^	enum mosquitto_msg_direction direction;$/;"	m	struct:mosquitto_message_all	typeref:enum:mosquitto_message_all::mosquitto_msg_direction
direction	./src/mosquitto_broker.h	/^	enum mosquitto_msg_direction direction;$/;"	m	struct:mosquitto_client_msg	typeref:enum:mosquitto_client_msg::mosquitto_msg_direction
direction	./src/mosquitto_broker.h	/^	enum mqtt3_bridge_direction direction;$/;"	m	struct:_mqtt3_bridge_topic	typeref:enum:_mqtt3_bridge_topic::mqtt3_bridge_direction
disconnect_sent	./client/pub_client.c	/^static bool disconnect_sent = false;$/;"	v	file:
disconnect_t	./lib/mosquitto_internal.h	/^	time_t disconnect_t;$/;"	m	struct:mosquitto
do_disconnect	./src/loop.c	/^static void do_disconnect(struct mosquitto_db *db, int context_index)$/;"	f	file:
drop_privileges	./src/mosquitto.c	/^int drop_privileges(struct mqtt3_config *config)$/;"	f
dup	./lib/mosquitto_internal.h	/^	bool dup;$/;"	m	struct:mosquitto_message_all
dup	./src/mosquitto_broker.h	/^	bool dup;$/;"	m	struct:mosquitto_client_msg
expand_mult	./src/uthash.h	/^   unsigned expand_mult;$/;"	m	struct:UT_hash_bucket
fd	./src/mosquitto_broker.h	/^	int fd;$/;"	m	struct:_mqtt3_listener
first_connection	./test/lib/c/03-publish-c2b-qos1-disconnect.c	/^static int first_connection = 1;$/;"	v	file:
first_connection	./test/lib/c/03-publish-c2b-qos2-disconnect.c	/^static int first_connection = 1;$/;"	v	file:
flag_db_backup	./src/mosquitto.c	/^bool flag_db_backup = false;$/;"	v
flag_reload	./src/mosquitto.c	/^bool flag_reload = false;$/;"	v
flag_tree_print	./src/mosquitto.c	/^bool flag_tree_print = false;$/;"	v
fptr	./test/msgsps_sub.c	/^FILE *fptr = NULL;$/;"	v
g_bytes_received	./src/sys_tree.c	/^uint64_t g_bytes_received = 0;$/;"	v
g_bytes_sent	./src/sys_tree.c	/^uint64_t g_bytes_sent = 0;$/;"	v
g_clients_expired	./src/sys_tree.c	/^int g_clients_expired = 0;$/;"	v
g_connection_count	./src/sys_tree.c	/^unsigned int g_connection_count = 0;$/;"	v
g_msgs_dropped	./src/sys_tree.c	/^unsigned long g_msgs_dropped = 0;$/;"	v
g_msgs_received	./src/sys_tree.c	/^unsigned long g_msgs_received = 0;$/;"	v
g_msgs_sent	./src/sys_tree.c	/^unsigned long g_msgs_sent = 0;$/;"	v
g_pub_bytes_received	./src/sys_tree.c	/^uint64_t g_pub_bytes_received = 0;$/;"	v
g_pub_bytes_sent	./src/sys_tree.c	/^uint64_t g_pub_bytes_sent = 0;$/;"	v
g_pub_msgs_received	./src/sys_tree.c	/^unsigned long g_pub_msgs_received = 0;$/;"	v
g_pub_msgs_sent	./src/sys_tree.c	/^unsigned long g_pub_msgs_sent = 0;$/;"	v
g_socket_connections	./src/sys_tree.c	/^unsigned int g_socket_connections = 0;$/;"	v
get16bits	./src/uthash.h	458;"	d
get16bits	./src/uthash.h	461;"	d
get16bits	./src/uthash.h	465;"	d
get_password	./src/mosquitto_passwd.c	/^int get_password(char *password, int len)$/;"	f
gets_quiet	./src/mosquitto_passwd.c	/^int gets_quiet(char *s, int len)$/;"	f
handle_read	./test/random_client.c	/^int handle_read(mqtt3_context *context)$/;"	f
handle_sighup	./src/mosquitto.c	/^void handle_sighup(int signal)$/;"	f
handle_sigint	./src/mosquitto.c	/^void handle_sigint(int signal)$/;"	f
handle_sigint	./src/mosquitto_passwd.c	/^void handle_sigint(int signal)$/;"	f
handle_signal	./examples/mysql_log/mysql_log.c	/^void handle_signal(int s)$/;"	f
handle_sigusr1	./src/mosquitto.c	/^void handle_sigusr1(int signal)$/;"	f
handle_sigusr2	./src/mosquitto.c	/^void handle_sigusr2(int signal)$/;"	f
hashv	./src/uthash.h	/^   unsigned hashv;                   \/* result of hash-fcn(key)        *\/$/;"	m	struct:UT_hash_handle
have_remaining	./lib/mosquitto_internal.h	/^	uint8_t have_remaining;\/\/是否已经读取完了remaining length字段$/;"	m	struct:_mosquitto_packet
hh	./src/mosquitto_broker.h	/^	UT_hash_handle hh;$/;"	m	struct:_clientid_index_hash
hh	./src/mosquitto_broker.h	/^	UT_hash_handle hh;$/;"	m	struct:_mosquitto_unpwd
hh_head	./src/uthash.h	/^   struct UT_hash_handle *hh_head;$/;"	m	struct:UT_hash_bucket	typeref:struct:UT_hash_bucket::UT_hash_handle
hh_next	./src/uthash.h	/^   struct UT_hash_handle *hh_next;   \/* next hh in bucket order        *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle
hh_prev	./src/uthash.h	/^   struct UT_hash_handle *hh_prev;   \/* previous hh in bucket order    *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle
hho	./src/uthash.h	/^   ptrdiff_t hho; \/* hash handle offset (byte pos of hash handle in element *\/$/;"	m	struct:UT_hash_table
host	./lib/mosquitto_internal.h	/^	char *host;$/;"	m	struct:mosquitto
host	./src/mosquitto_broker.h	/^	char *host;$/;"	m	struct:_mqtt3_listener
id	./lib/mosquitto_internal.h	/^	char *id;\/\/客户端的id$/;"	m	struct:mosquitto
id	./src/mosquitto_broker.h	/^	char *id;$/;"	m	struct:_clientid_index_hash
ideal_chain_maxlen	./src/uthash.h	/^   unsigned ideal_chain_maxlen;$/;"	m	struct:UT_hash_table
idle_timeout	./src/mosquitto_broker.h	/^	int idle_timeout;$/;"	m	struct:_mqtt3_bridge
in_callback	./lib/mosquitto_internal.h	/^	bool in_callback;$/;"	m	struct:mosquitto
in_packet	./lib/mosquitto_internal.h	/^	struct _mosquitto_packet in_packet;\/\/客户端发送过来的最后一个包$/;"	m	struct:mosquitto	typeref:struct:mosquitto::_mosquitto_packet
ineff_expands	./src/uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table
inflight_messages	./lib/mosquitto_internal.h	/^	int inflight_messages;$/;"	m	struct:mosquitto
int_db	./src/mosquitto.c	/^struct mosquitto_db int_db;$/;"	v	typeref:struct:mosquitto_db
is_bridge	./lib/mosquitto_internal.h	/^	bool is_bridge;$/;"	m	struct:mosquitto
keepalive	./lib/mosquitto_internal.h	/^	uint16_t keepalive;\/\/客户端发送过来的keepalive时间$/;"	m	struct:mosquitto
keepalive	./src/mosquitto_broker.h	/^	int keepalive;$/;"	m	struct:_mqtt3_bridge
key	./src/mosquitto_plugin.h	/^	char *key;$/;"	m	struct:mosquitto_auth_opt
key	./src/uthash.h	/^   void *key;                        \/* ptr to enclosing struct's key  *\/$/;"	m	struct:UT_hash_handle
keylen	./src/uthash.h	/^   unsigned keylen;                  \/* enclosing struct's key len     *\/$/;"	m	struct:UT_hash_handle
last_db_id	./src/mosquitto_broker.h	/^	dbid_t last_db_id;\/\/msg_store上的消息的顺序id$/;"	m	struct:mosquitto_db
last_mid	./client/pub_client.c	/^static int last_mid = -1;$/;"	v	file:
last_mid	./lib/mosquitto_internal.h	/^	uint16_t last_mid;\/\/这个连接的上一个msgid$/;"	m	struct:mosquitto
last_msg_in	./lib/mosquitto_internal.h	/^	time_t last_msg_in;$/;"	m	struct:mosquitto
last_msg_out	./lib/mosquitto_internal.h	/^	time_t last_msg_out;$/;"	m	struct:mosquitto
last_retry_check	./lib/mosquitto_internal.h	/^	time_t last_retry_check;$/;"	m	struct:mosquitto
lazy_reconnect	./src/mosquitto_broker.h	/^	bool lazy_reconnect;$/;"	m	struct:_mqtt3_bridge
lib	./src/mosquitto_broker.h	/^	void *lib;$/;"	m	struct:_mosquitto_auth_plugin
libmosq_EXPORT	./lib/mosquitto.h	44;"	d
listener	./lib/mosquitto_internal.h	/^	struct _mqtt3_listener *listener; \/\/指向我所属的listener的db->config->listeners[i]位置$/;"	m	struct:mosquitto	typeref:struct:mosquitto::_mqtt3_listener
listener_count	./src/mosquitto_broker.h	/^	int listener_count;$/;"	m	struct:mqtt3_config
listeners	./src/mosquitto_broker.h	/^	struct _mqtt3_listener *listeners;$/;"	m	struct:mqtt3_config	typeref:struct:mqtt3_config::_mqtt3_listener
load_file	./client/pub_client.c	/^int load_file(const char *filename)$/;"	f
load_stdin	./client/pub_client.c	/^int load_stdin(void)$/;"	f
local_prefix	./src/mosquitto_broker.h	/^	char *local_prefix;$/;"	m	struct:_mqtt3_bridge_topic
local_topic	./src/mosquitto_broker.h	/^	char *local_topic; \/* topic prefixed with local_prefix *\/$/;"	m	struct:_mqtt3_bridge_topic
log2_num_buckets	./src/uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table
log_callback_mutex	./lib/mosquitto_internal.h	/^	pthread_mutex_t log_callback_mutex;$/;"	m	struct:mosquitto
log_dest	./src/conf.c	/^	int log_dest;$/;"	m	struct:config_recurse	file:
log_dest	./src/mosquitto_broker.h	/^	int log_dest;$/;"	m	struct:mqtt3_config
log_dest_set	./src/conf.c	/^	int log_dest_set;$/;"	m	struct:config_recurse	file:
log_destinations	./src/logging.c	/^static int log_destinations = MQTT3_LOG_STDERR;$/;"	v	file:
log_file	./src/mosquitto_broker.h	/^	char *log_file;$/;"	m	struct:mqtt3_config
log_fptr	./src/mosquitto_broker.h	/^	FILE *log_fptr;$/;"	m	struct:mqtt3_config
log_priorities	./src/logging.c	/^static int log_priorities = MOSQ_LOG_ERR | MOSQ_LOG_WARNING | MOSQ_LOG_NOTICE | MOSQ_LOG_INFO;$/;"	v	file:
log_timestamp	./src/mosquitto_broker.h	/^	bool log_timestamp;$/;"	m	struct:mqtt3_config
log_type	./src/conf.c	/^	int log_type;$/;"	m	struct:config_recurse	file:
log_type	./src/mosquitto_broker.h	/^	int log_type;$/;"	m	struct:mqtt3_config
log_type_set	./src/conf.c	/^	int log_type_set;$/;"	m	struct:config_recurse	file:
loop_handle_errors	./src/loop.c	/^static void loop_handle_errors(struct mosquitto_db *db, struct pollfd *pollfds)$/;"	f	file:
loop_handle_reads_writes	./src/loop.c	/^static void loop_handle_reads_writes(struct mosquitto_db *db, struct pollfd *pollfds)$/;"	f	file:
m_mosq	./lib/cpp/mosquittopp.h	/^		struct mosquitto *m_mosq;$/;"	m	class:mosqpp::mosquittopp	typeref:struct:mosqpp::mosquittopp::mosquitto
magic	./src/persist.h	/^const unsigned char magic[15] = {0x00, 0xB5, 0x00, 'm','o','s','q','u','i','t','t','o',' ','d','b'};$/;"	v
main	./client/pub_client.c	/^int main(int argc, char *argv[])$/;"	f
main	./client/sub_client.c	/^int main(int argc, char *argv[])$/;"	f
main	./examples/mysql_log/mysql_log.c	/^int main(int argc, char *argv[])$/;"	f
main	./src/db_dump/db_dump.c	/^int main(int argc, char *argv[])$/;"	f
main	./src/mosquitto.c	/^int main(int argc, char *argv[])$/;"	f
main	./src/mosquitto_passwd.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/fake_user.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/01-con-discon-success.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/01-keepalive-pingreq.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/01-no-clean-session.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/01-unpwd-set.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/01-will-set.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/01-will-unpwd-set.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/02-subscribe-qos0.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/02-subscribe-qos1.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/02-subscribe-qos2.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/02-unsubscribe.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/03-publish-b2c-qos1.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/03-publish-b2c-qos2.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/03-publish-c2b-qos1-disconnect.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/03-publish-c2b-qos1-timeout.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/03-publish-c2b-qos2-disconnect.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/03-publish-c2b-qos2-timeout.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/03-publish-c2b-qos2.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/03-publish-qos0-no-payload.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/03-publish-qos0.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/04-retain-qos0.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/09-util-topic-matching.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/lib/c/09-util-topic-tokenise.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/msgsps_pub.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/msgsps_sub.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/packet-gen.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/qos.c	/^int main(int argc, char *argv[])$/;"	f
main	./test/random_client.c	/^int main(int argc, char *argv[])$/;"	f
malloc_usable_size	./lib/memory_mosq.c	39;"	d	file:
max_connections	./src/mosquitto_broker.h	/^	int max_connections;$/;"	m	struct:_mqtt3_listener
max_inflight	./src/database.c	/^static int max_inflight = 20;\/\/一次$/;"	v	file:
max_inflight_messages	./lib/mosquitto_internal.h	/^	int max_inflight_messages;$/;"	m	struct:mosquitto
max_inflight_messages	./src/conf.c	/^	int max_inflight_messages;$/;"	m	struct:config_recurse	file:
max_memcount	./lib/memory_mosq.c	/^static unsigned long max_memcount = 0;$/;"	v	file:
max_queued	./src/database.c	/^static int max_queued = 100;$/;"	v	file:
max_queued_messages	./src/conf.c	/^	int max_queued_messages;$/;"	m	struct:config_recurse	file:
memcount	./lib/memory_mosq.c	/^static unsigned long memcount = 0;$/;"	v	file:
message	./client/pub_client.c	/^static char *message = NULL;$/;"	v	file:
message_callback	./examples/mysql_log/mysql_log.c	/^void message_callback(struct mosquitto *mosq, void *obj, const struct mosquitto_message *message)$/;"	f
message_count	./test/msgsps_pub.c	/^static int message_count = 0;$/;"	v	file:
message_count	./test/msgsps_sub.c	/^static int message_count = 0;$/;"	v	file:
message_mutex	./lib/mosquitto_internal.h	/^	pthread_mutex_t message_mutex;$/;"	m	struct:mosquitto
message_retry	./lib/mosquitto_internal.h	/^	unsigned int message_retry;$/;"	m	struct:mosquitto
message_size_limit	./src/mosquitto_broker.h	/^	int message_size_limit;$/;"	m	struct:mqtt3_config
messages	./lib/mosquitto_internal.h	/^	struct mosquitto_message_all *messages;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::mosquitto_message_all
messages_last	./lib/mosquitto_internal.h	/^	struct mosquitto_message_all *messages_last;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::mosquitto_message_all
messages_received	./test/qos.c	/^struct msg_list *messages_received = NULL;$/;"	v	typeref:struct:msg_list
messages_sent	./test/qos.c	/^struct msg_list *messages_sent = NULL;$/;"	v	typeref:struct:msg_list
mid	./lib/mosquitto.h	/^	int mid;$/;"	m	struct:mosquitto_message
mid	./lib/mosquitto_internal.h	/^	uint16_t mid;$/;"	m	struct:_mosquitto_packet
mid	./src/mosquitto_broker.h	/^	uint16_t mid;$/;"	m	struct:mosquitto_client_msg
mid	./test/qos.c	/^	uint16_t mid;$/;"	m	struct:sub	file:
mid_sent	./client/pub_client.c	/^static int mid_sent = 0;$/;"	v	file:
mode	./client/pub_client.c	/^static int mode = MSGMODE_NONE;$/;"	v	file:
mosq_cs_authorized	./lib/mosquitto_internal.h	/^	mosq_cs_authorized,\/\/验证完成$/;"	e	enum:mosquitto_client_state
mosq_cs_authorizing	./lib/mosquitto_internal.h	/^	mosq_cs_authorizing,\/\/正在等待验证$/;"	e	enum:mosquitto_client_state
mosq_cs_connect_async	./lib/mosquitto_internal.h	/^	mosq_cs_connect_async,$/;"	e	enum:mosquitto_client_state
mosq_cs_connect_pending	./lib/mosquitto_internal.h	/^	mosq_cs_connect_pending$/;"	e	enum:mosquitto_client_state
mosq_cs_connected	./lib/mosquitto_internal.h	/^	mosq_cs_connected ,$/;"	e	enum:mosquitto_client_state
mosq_cs_disconnecting	./lib/mosquitto_internal.h	/^	mosq_cs_disconnecting ,$/;"	e	enum:mosquitto_client_state
mosq_cs_new	./lib/mosquitto_internal.h	/^	mosq_cs_new = 0,$/;"	e	enum:mosquitto_client_state
mosq_err_t	./lib/mosquitto.h	/^enum mosq_err_t {$/;"	g
mosq_md_in	./lib/mosquitto_internal.h	/^	mosq_md_in = 0,$/;"	e	enum:mosquitto_msg_direction
mosq_md_out	./lib/mosquitto_internal.h	/^	mosq_md_out = 1$/;"	e	enum:mosquitto_msg_direction
mosq_ms_invalid	./lib/mosquitto_internal.h	/^	mosq_ms_invalid = 0,$/;"	e	enum:mosquitto_msg_state
mosq_ms_publish_qos0	./lib/mosquitto_internal.h	/^	mosq_ms_publish_qos0 = 1,$/;"	e	enum:mosquitto_msg_state
mosq_ms_publish_qos1	./lib/mosquitto_internal.h	/^	mosq_ms_publish_qos1 = 2,$/;"	e	enum:mosquitto_msg_state
mosq_ms_publish_qos2	./lib/mosquitto_internal.h	/^	mosq_ms_publish_qos2 = 4,$/;"	e	enum:mosquitto_msg_state
mosq_ms_queued	./lib/mosquitto_internal.h	/^	mosq_ms_queued = 11	\/\/消息等待发送,之所以有这个状态，是因为有最大inflight消息限制，比如max_inflight，也就是说没有稳妥搞定的消息最大条数$/;"	e	enum:mosquitto_msg_state
mosq_ms_resend_pubcomp	./lib/mosquitto_internal.h	/^	mosq_ms_resend_pubcomp = 8,$/;"	e	enum:mosquitto_msg_state
mosq_ms_resend_pubrel	./lib/mosquitto_internal.h	/^	mosq_ms_resend_pubrel = 6,$/;"	e	enum:mosquitto_msg_state
mosq_ms_send_pubrec	./lib/mosquitto_internal.h	/^	mosq_ms_send_pubrec = 10,$/;"	e	enum:mosquitto_msg_state
mosq_ms_wait_for_puback	./lib/mosquitto_internal.h	/^	mosq_ms_wait_for_puback = 3,$/;"	e	enum:mosquitto_msg_state
mosq_ms_wait_for_pubcomp	./lib/mosquitto_internal.h	/^	mosq_ms_wait_for_pubcomp = 9,$/;"	e	enum:mosquitto_msg_state
mosq_ms_wait_for_pubrec	./lib/mosquitto_internal.h	/^	mosq_ms_wait_for_pubrec = 5,$/;"	e	enum:mosquitto_msg_state
mosq_ms_wait_for_pubrel	./lib/mosquitto_internal.h	/^	mosq_ms_wait_for_pubrel = 7,$/;"	e	enum:mosquitto_msg_state
mosqpp	./lib/cpp/mosquittopp.h	/^namespace mosqpp {$/;"	n
mosqpp_EXPORT	./lib/cpp/mosquittopp.h	42;"	d
mosqpp_EXPORT	./lib/cpp/mosquittopp.h	44;"	d
mosqpp_EXPORT	./lib/cpp/mosquittopp.h	47;"	d
mosquitto	./lib/mosquitto_internal.h	/^struct mosquitto {$/;"	s
mosquitto_acl_check	./src/security.c	/^int mosquitto_acl_check(struct mosquitto_db *db, struct mosquitto *context, const char *topic, int access)$/;"	f
mosquitto_acl_check_default	./src/security_default.c	/^int mosquitto_acl_check_default(struct mosquitto_db *db, struct mosquitto *context, const char *topic, int access)$/;"	f
mosquitto_auth_opt	./src/mosquitto_plugin.h	/^struct mosquitto_auth_opt {$/;"	s
mosquitto_bridge_start_type	./src/mosquitto_broker.h	/^enum mosquitto_bridge_start_type{$/;"	g
mosquitto_client_msg	./src/mosquitto_broker.h	/^struct mosquitto_client_msg{\/\/这是要发送给客户端的消息结构$/;"	s
mosquitto_client_state	./lib/mosquitto_internal.h	/^enum mosquitto_client_state {$/;"	g
mosquitto_connack_string	./lib/mosquitto.c	/^const char *mosquitto_connack_string(int connack_code)$/;"	f
mosquitto_connect	./lib/mosquitto.c	/^int mosquitto_connect(struct mosquitto *mosq, const char *host, int port, int keepalive)$/;"	f
mosquitto_connect_async	./lib/mosquitto.c	/^int mosquitto_connect_async(struct mosquitto *mosq, const char *host, int port, int keepalive)$/;"	f
mosquitto_connect_bind	./lib/mosquitto.c	/^int mosquitto_connect_bind(struct mosquitto *mosq, const char *host, int port, int keepalive, const char *bind_address)$/;"	f
mosquitto_connect_bind_async	./lib/mosquitto.c	/^int mosquitto_connect_bind_async(struct mosquitto *mosq, const char *host, int port, int keepalive, const char *bind_address)$/;"	f
mosquitto_connect_callback_set	./lib/mosquitto.c	/^void mosquitto_connect_callback_set(struct mosquitto *mosq, void (*on_connect)(struct mosquitto *, void *, int))$/;"	f
mosquitto_db	./src/mosquitto_broker.h	/^struct mosquitto_db{$/;"	s
mosquitto_destroy	./lib/mosquitto.c	/^void mosquitto_destroy(struct mosquitto *mosq)$/;"	f
mosquitto_disconnect	./lib/mosquitto.c	/^int mosquitto_disconnect(struct mosquitto *mosq)$/;"	f
mosquitto_disconnect_callback_set	./lib/mosquitto.c	/^void mosquitto_disconnect_callback_set(struct mosquitto *mosq, void (*on_disconnect)(struct mosquitto *, void *, int))$/;"	f
mosquitto_lib_cleanup	./lib/mosquitto.c	/^int mosquitto_lib_cleanup(void)$/;"	f
mosquitto_lib_init	./lib/mosquitto.c	/^int mosquitto_lib_init(void)$/;"	f
mosquitto_lib_version	./lib/mosquitto.c	/^int mosquitto_lib_version(int *major, int *minor, int *revision)$/;"	f
mosquitto_log_callback_set	./lib/mosquitto.c	/^void mosquitto_log_callback_set(struct mosquitto *mosq, void (*on_log)(struct mosquitto *, void *, int, const char *))$/;"	f
mosquitto_loop	./lib/mosquitto.c	/^int mosquitto_loop(struct mosquitto *mosq, int timeout, int max_packets)$/;"	f
mosquitto_loop_forever	./lib/mosquitto.c	/^int mosquitto_loop_forever(struct mosquitto *mosq, int timeout, int max_packets)$/;"	f
mosquitto_loop_misc	./lib/mosquitto.c	/^int mosquitto_loop_misc(struct mosquitto *mosq)$/;"	f
mosquitto_loop_read	./lib/mosquitto.c	/^int mosquitto_loop_read(struct mosquitto *mosq, int max_packets)$/;"	f
mosquitto_loop_start	./lib/thread_mosq.c	/^int mosquitto_loop_start(struct mosquitto *mosq)$/;"	f
mosquitto_loop_stop	./lib/thread_mosq.c	/^int mosquitto_loop_stop(struct mosquitto *mosq, bool force)$/;"	f
mosquitto_loop_write	./lib/mosquitto.c	/^int mosquitto_loop_write(struct mosquitto *mosq, int max_packets)$/;"	f
mosquitto_main_loop	./src/loop.c	/^int mosquitto_main_loop(struct mosquitto_db *db, int *listensock, int listensock_count, int listener_max)$/;"	f
mosquitto_max_inflight_messages_set	./lib/messages_mosq.c	/^int mosquitto_max_inflight_messages_set(struct mosquitto *mosq, unsigned int max_inflight_messages)$/;"	f
mosquitto_message	./lib/mosquitto.h	/^struct mosquitto_message{$/;"	s
mosquitto_message_all	./lib/mosquitto_internal.h	/^struct mosquitto_message_all{$/;"	s
mosquitto_message_callback_set	./lib/mosquitto.c	/^void mosquitto_message_callback_set(struct mosquitto *mosq, void (*on_message)(struct mosquitto *, void *, const struct mosquitto_message *))$/;"	f
mosquitto_message_copy	./lib/messages_mosq.c	/^int mosquitto_message_copy(struct mosquitto_message *dst, const struct mosquitto_message *src)$/;"	f
mosquitto_message_free	./lib/messages_mosq.c	/^void mosquitto_message_free(struct mosquitto_message **message)$/;"	f
mosquitto_message_retry_set	./lib/messages_mosq.c	/^void mosquitto_message_retry_set(struct mosquitto *mosq, unsigned int message_retry)$/;"	f
mosquitto_msg_direction	./lib/mosquitto_internal.h	/^enum mosquitto_msg_direction {$/;"	g
mosquitto_msg_state	./lib/mosquitto_internal.h	/^enum mosquitto_msg_state {$/;"	g
mosquitto_msg_store	./src/mosquitto_broker.h	/^struct mosquitto_msg_store{\/\/这是服务端记录的消息结构$/;"	s
mosquitto_new	./lib/mosquitto.c	/^struct mosquitto *mosquitto_new(const char *id, bool clean_session, void *userdata)$/;"	f
mosquitto_publish	./lib/mosquitto.c	/^int mosquitto_publish(struct mosquitto *mosq, int *mid, const char *topic, int payloadlen, const void *payload, int qos, bool retain)$/;"	f
mosquitto_publish_callback_set	./lib/mosquitto.c	/^void mosquitto_publish_callback_set(struct mosquitto *mosq, void (*on_publish)(struct mosquitto *, void *, int))$/;"	f
mosquitto_reconnect	./lib/mosquitto.c	/^int mosquitto_reconnect(struct mosquitto *mosq)$/;"	f
mosquitto_reconnect_async	./lib/mosquitto.c	/^int mosquitto_reconnect_async(struct mosquitto *mosq)$/;"	f
mosquitto_reconnect_delay_set	./lib/mosquitto.c	/^int mosquitto_reconnect_delay_set(struct mosquitto *mosq, unsigned int reconnect_delay, unsigned int reconnect_delay_max, bool reconnect_exponential_backoff)$/;"	f
mosquitto_reinitialise	./lib/mosquitto.c	/^int mosquitto_reinitialise(struct mosquitto *mosq, const char *id, bool clean_session, void *userdata)$/;"	f
mosquitto_security_apply	./src/security.c	/^int mosquitto_security_apply(struct mosquitto_db *db)$/;"	f
mosquitto_security_apply_default	./src/security_default.c	/^int mosquitto_security_apply_default(struct mosquitto_db *db)$/;"	f
mosquitto_security_cleanup	./src/security.c	/^int mosquitto_security_cleanup(struct mosquitto_db *db, bool reload)$/;"	f
mosquitto_security_cleanup_default	./src/security_default.c	/^int mosquitto_security_cleanup_default(struct mosquitto_db *db, bool reload)$/;"	f
mosquitto_security_init	./src/security.c	/^int mosquitto_security_init(struct mosquitto_db *db, bool reload)$/;"	f
mosquitto_security_init_default	./src/security_default.c	/^int mosquitto_security_init_default(struct mosquitto_db *db, bool reload)$/;"	f
mosquitto_security_module_cleanup	./src/security.c	/^int mosquitto_security_module_cleanup(struct mosquitto_db *db)$/;"	f
mosquitto_security_module_init	./src/security.c	/^int mosquitto_security_module_init(struct mosquitto_db *db)$/;"	f
mosquitto_socket	./lib/mosquitto.c	/^int mosquitto_socket(struct mosquitto *mosq)$/;"	f
mosquitto_strerror	./lib/mosquitto.c	/^const char *mosquitto_strerror(int mosq_errno)$/;"	f
mosquitto_sub_topic_tokenise	./lib/mosquitto.c	/^int mosquitto_sub_topic_tokenise(const char *subtopic, char ***topics, int *count)$/;"	f
mosquitto_sub_topic_tokens_free	./lib/mosquitto.c	/^int mosquitto_sub_topic_tokens_free(char ***topics, int count)$/;"	f
mosquitto_subscribe	./lib/mosquitto.c	/^int mosquitto_subscribe(struct mosquitto *mosq, int *mid, const char *sub, int qos)$/;"	f
mosquitto_subscribe_callback_set	./lib/mosquitto.c	/^void mosquitto_subscribe_callback_set(struct mosquitto *mosq, void (*on_subscribe)(struct mosquitto *, void *, int, int, const int *))$/;"	f
mosquitto_time	./lib/time_mosq.c	/^time_t mosquitto_time(void)$/;"	f
mosquitto_topic_matches_sub	./lib/util_mosq.c	/^int mosquitto_topic_matches_sub(const char *sub, const char *topic, bool *result)$/;"	f
mosquitto_unpwd_check	./src/security.c	/^int mosquitto_unpwd_check(struct mosquitto_db *db, const char *username, const char *password)$/;"	f
mosquitto_unpwd_check_default	./src/security_default.c	/^int mosquitto_unpwd_check_default(struct mosquitto_db *db, const char *username, const char *password)$/;"	f
mosquitto_unsubscribe	./lib/mosquitto.c	/^int mosquitto_unsubscribe(struct mosquitto *mosq, int *mid, const char *sub)$/;"	f
mosquitto_unsubscribe_callback_set	./lib/mosquitto.c	/^void mosquitto_unsubscribe_callback_set(struct mosquitto *mosq, void (*on_unsubscribe)(struct mosquitto *, void *, int))$/;"	f
mosquitto_user_data_set	./lib/mosquitto.c	/^void mosquitto_user_data_set(struct mosquitto *mosq, void *userdata)$/;"	f
mosquitto_username_pw_set	./lib/mosquitto.c	/^int mosquitto_username_pw_set(struct mosquitto *mosq, const char *username, const char *password)$/;"	f
mosquitto_want_write	./lib/mosquitto.c	/^bool mosquitto_want_write(struct mosquitto *mosq)$/;"	f
mosquitto_will_clear	./lib/mosquitto.c	/^int mosquitto_will_clear(struct mosquitto *mosq)$/;"	f
mosquitto_will_set	./lib/mosquitto.c	/^int mosquitto_will_set(struct mosquitto *mosq, const char *topic, int payloadlen, const void *payload, int qos, bool retain)$/;"	f
mosquittopp	./lib/cpp/mosquittopp.h	/^class mosqpp_EXPORT mosquittopp {$/;"	c	namespace:mosqpp
mount_point	./src/mosquitto_broker.h	/^	char *mount_point;\/\/配置项，代表本broker里面的所有topic的前缀。注意跟其他客户端是不可见的。$/;"	m	struct:_mqtt3_listener
mqtt3_bridge_direction	./src/mosquitto_broker.h	/^enum mqtt3_bridge_direction{$/;"	g
mqtt3_config	./src/mosquitto_broker.h	/^struct mqtt3_config {$/;"	s
mqtt3_config_cleanup	./src/conf.c	/^void mqtt3_config_cleanup(struct mqtt3_config *config)$/;"	f
mqtt3_config_init	./src/conf.c	/^void mqtt3_config_init(struct mqtt3_config *config)$/;"	f
mqtt3_config_parse_args	./src/conf.c	/^int mqtt3_config_parse_args(struct mqtt3_config *config, int argc, char *argv[])$/;"	f
mqtt3_config_read	./src/conf.c	/^int mqtt3_config_read(struct mqtt3_config *config, bool reload)$/;"	f
mqtt3_context_cleanup	./src/context.c	/^void mqtt3_context_cleanup(struct mosquitto_db *db, struct mosquitto *context, bool do_free)$/;"	f
mqtt3_context_disconnect	./src/context.c	/^void mqtt3_context_disconnect(struct mosquitto_db *db, struct mosquitto *ctxt)$/;"	f
mqtt3_context_init	./src/context.c	/^struct mosquitto *mqtt3_context_init(int sock)$/;"	f
mqtt3_db_backup	./src/persist.c	/^int mqtt3_db_backup(struct mosquitto_db *db, bool cleanup, bool shutdown)$/;"	f
mqtt3_db_client_count	./src/database.c	/^int mqtt3_db_client_count(struct mosquitto_db *db, unsigned int *count, unsigned int *inactive_count)$/;"	f
mqtt3_db_client_messages_write	./src/persist.c	/^static int mqtt3_db_client_messages_write(struct mosquitto_db *db, FILE *db_fptr, struct mosquitto *context)$/;"	f	file:
mqtt3_db_client_write	./src/persist.c	/^static int mqtt3_db_client_write(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
mqtt3_db_close	./src/database.c	/^int mqtt3_db_close(struct mosquitto_db *db)$/;"	f
mqtt3_db_limits_set	./src/database.c	/^void mqtt3_db_limits_set(int inflight, int queued)$/;"	f
mqtt3_db_message_delete	./src/database.c	/^int mqtt3_db_message_delete(struct mosquitto *context, uint16_t mid, enum mosquitto_msg_direction dir)$/;"	f
mqtt3_db_message_insert	./src/database.c	/^int mqtt3_db_message_insert(struct mosquitto_db *db, struct mosquitto *context, uint16_t mid, enum mosquitto_msg_direction dir, int qos, bool retain, struct mosquitto_msg_store *stored)$/;"	f
mqtt3_db_message_reconnect_reset	./src/database.c	/^int mqtt3_db_message_reconnect_reset(struct mosquitto *context)$/;"	f
mqtt3_db_message_release	./src/database.c	/^int mqtt3_db_message_release(struct mosquitto_db *db, struct mosquitto *context, uint16_t mid, enum mosquitto_msg_direction dir)$/;"	f
mqtt3_db_message_store	./src/database.c	/^int mqtt3_db_message_store(struct mosquitto_db *db, const char *source, uint16_t source_mid, const char *topic, int qos, uint32_t payloadlen, const void *payload, int retain, struct mosquitto_msg_store **stored, dbid_t store_id)$/;"	f
mqtt3_db_message_store_find	./src/database.c	/^int mqtt3_db_message_store_find(struct mosquitto *context, uint16_t mid, struct mosquitto_msg_store **stored)$/;"	f
mqtt3_db_message_store_write	./src/persist.c	/^static int mqtt3_db_message_store_write(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
mqtt3_db_message_timeout_check	./src/database.c	/^int mqtt3_db_message_timeout_check(struct mosquitto_db *db, unsigned int timeout)$/;"	f
mqtt3_db_message_update	./src/database.c	/^int mqtt3_db_message_update(struct mosquitto *context, uint16_t mid, enum mosquitto_msg_direction dir, enum mosquitto_msg_state state)$/;"	f
mqtt3_db_message_write	./src/database.c	/^int mqtt3_db_message_write(struct mosquitto *context)$/;"	f
mqtt3_db_messages_delete	./src/database.c	/^int mqtt3_db_messages_delete(struct mosquitto *context)$/;"	f
mqtt3_db_messages_easy_queue	./src/database.c	/^int mqtt3_db_messages_easy_queue(struct mosquitto_db *db, struct mosquitto *context, const char *topic, int qos, uint32_t payloadlen, const void *payload, int retain)$/;"	f
mqtt3_db_messages_queue	./src/subs.c	/^int mqtt3_db_messages_queue(struct mosquitto_db *db, const char *source_id, const char *topic, int qos, int retain, struct mosquitto_msg_store *stored)$/;"	f
mqtt3_db_open	./src/database.c	/^int mqtt3_db_open(struct mqtt3_config *config, struct mosquitto_db *db)$/;"	f
mqtt3_db_restore	./src/persist.c	/^int mqtt3_db_restore(struct mosquitto_db *db)$/;"	f
mqtt3_db_store_clean	./src/database.c	/^void mqtt3_db_store_clean(struct mosquitto_db *db)$/;"	f
mqtt3_db_subs_retain_write	./src/persist.c	/^static int mqtt3_db_subs_retain_write(struct mosquitto_db *db, FILE *db_fptr)$/;"	f	file:
mqtt3_db_sys_update	./src/sys_tree.c	/^void mqtt3_db_sys_update(struct mosquitto_db *db, int interval, time_t start_time)$/;"	f
mqtt3_db_vacuum	./src/database.c	/^void mqtt3_db_vacuum(void)$/;"	f
mqtt3_handle_connack	./src/read_handle_client.c	/^int mqtt3_handle_connack(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_handle_connect	./src/read_handle_server.c	/^int mqtt3_handle_connect(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_handle_disconnect	./src/read_handle_server.c	/^int mqtt3_handle_disconnect(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_handle_post_check_unpwd	./src/read_handle_server.c	/^int mqtt3_handle_post_check_unpwd( struct mosquitto_db *db, struct mosquitto *context ){$/;"	f
mqtt3_handle_publish	./src/read_handle.c	/^int mqtt3_handle_publish(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_handle_subscribe	./src/read_handle_server.c	/^int mqtt3_handle_subscribe(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_handle_unsubscribe	./src/read_handle_server.c	/^int mqtt3_handle_unsubscribe(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_log_close	./src/logging.c	/^int mqtt3_log_close(void)$/;"	f
mqtt3_log_init	./src/logging.c	/^int mqtt3_log_init(int priorities, int destinations)$/;"	f
mqtt3_packet_handle	./src/read_handle.c	/^int mqtt3_packet_handle(struct mosquitto_db *db, struct mosquitto *context)$/;"	f
mqtt3_retain_queue	./src/subs.c	/^int mqtt3_retain_queue(struct mosquitto_db *db, struct mosquitto *context, const char *sub, int sub_qos)$/;"	f
mqtt3_socket_accept	./src/net.c	/^int mqtt3_socket_accept(struct mosquitto_db *db, int listensock)$/;"	f
mqtt3_socket_listen	./src/net.c	/^int mqtt3_socket_listen(struct _mqtt3_listener *listener)$/;"	f
mqtt3_sub_add	./src/subs.c	/^int mqtt3_sub_add(struct mosquitto_db *db, struct mosquitto *context, const char *sub, int qos, struct _mosquitto_subhier *root)$/;"	f
mqtt3_sub_remove	./src/subs.c	/^int mqtt3_sub_remove(struct mosquitto_db *db, struct mosquitto *context, const char *sub, struct _mosquitto_subhier *root)$/;"	f
mqtt3_sub_tree_print	./src/subs.c	/^void mqtt3_sub_tree_print(struct _mosquitto_subhier *root, int level)$/;"	f
mqtt3_subs_clean_session	./src/subs.c	/^int mqtt3_subs_clean_session(struct mosquitto_db *db, struct mosquitto *context, struct _mosquitto_subhier *root)$/;"	f
mqtt_host	./examples/mysql_log/mysql_log.c	18;"	d	file:
mqtt_port	./examples/mysql_log/mysql_log.c	19;"	d	file:
mqtt_tempconv	./examples/temperature_conversion/temperature_conversion.h	/^class mqtt_tempconv : public mosqpp::mosquittopp$/;"	c
msg	./lib/mosquitto_internal.h	/^	struct mosquitto_message msg;$/;"	m	struct:mosquitto_message_all	typeref:struct:mosquitto_message_all::mosquitto_message
msg	./src/mosquitto_broker.h	/^	struct mosquitto_message msg;$/;"	m	struct:mosquitto_msg_store	typeref:struct:mosquitto_msg_store::mosquitto_message
msg	./test/qos.c	/^	struct mosquitto_message msg;$/;"	m	struct:msg_list	typeref:struct:msg_list::mosquitto_message	file:
msg_list	./test/qos.c	/^struct msg_list{$/;"	s	file:
msg_store	./src/mosquitto_broker.h	/^	struct mosquitto_msg_store *msg_store;\/\/这里是所有publish的消息，都在这.新消息插入头部$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::mosquitto_msg_store
msg_store_count	./src/mosquitto_broker.h	/^	int msg_store_count;$/;"	m	struct:mosquitto_db
msglen	./client/pub_client.c	/^static long msglen = 0;$/;"	v	file:
msgs	./lib/mosquitto_internal.h	/^	struct mosquitto_client_msg *msgs;\/\/这个连接的消息链表,新的放在后面，输入输出消息都放在这里$/;"	m	struct:mosquitto	typeref:struct:mosquitto::mosquitto_client_msg
msgtime_mutex	./lib/mosquitto_internal.h	/^	pthread_mutex_t msgtime_mutex;$/;"	m	struct:mosquitto
my_connect_callback	./client/pub_client.c	/^void my_connect_callback(struct mosquitto *mosq, void *obj, int result)$/;"	f
my_connect_callback	./client/sub_client.c	/^void my_connect_callback(struct mosquitto *mosq, void *obj, int result)$/;"	f
my_connect_callback	./test/fake_user.c	/^void my_connect_callback(struct mosquitto *mosq, void *obj, int result)$/;"	f
my_connect_callback	./test/msgsps_pub.c	/^void my_connect_callback(struct mosquitto *mosq, void *obj, int rc)$/;"	f
my_connect_callback	./test/msgsps_sub.c	/^void my_connect_callback(struct mosquitto *mosq, void *obj, int rc)$/;"	f
my_disconnect_callback	./client/pub_client.c	/^void my_disconnect_callback(struct mosquitto *mosq, void *obj, int rc)$/;"	f
my_disconnect_callback	./test/msgsps_pub.c	/^void my_disconnect_callback(struct mosquitto *mosq, void *obj, int result)$/;"	f
my_disconnect_callback	./test/msgsps_sub.c	/^void my_disconnect_callback(struct mosquitto *mosq, void *obj, int result)$/;"	f
my_log_callback	./client/pub_client.c	/^void my_log_callback(struct mosquitto *mosq, void *obj, int level, const char *str)$/;"	f
my_log_callback	./client/sub_client.c	/^void my_log_callback(struct mosquitto *mosq, void *obj, int level, const char *str)$/;"	f
my_message_callback	./client/sub_client.c	/^void my_message_callback(struct mosquitto *mosq, void *obj, const struct mosquitto_message *message)$/;"	f
my_message_callback	./test/fake_user.c	/^void my_message_callback(struct mosquitto *mosq, void *obj, const struct mosquitto_message *message)$/;"	f
my_message_callback	./test/msgsps_sub.c	/^void my_message_callback(struct mosquitto *mosq, void *obj, const struct mosquitto_message *msg)$/;"	f
my_publish_callback	./client/pub_client.c	/^void my_publish_callback(struct mosquitto *mosq, void *obj, int mid)$/;"	f
my_publish_callback	./test/msgsps_pub.c	/^void my_publish_callback(struct mosquitto *mosq, void *obj, int mid)$/;"	f
my_subscribe_callback	./client/sub_client.c	/^void my_subscribe_callback(struct mosquitto *mosq, void *obj, int mid, int qos_count, const int *granted_qos)$/;"	f
my_subscribe_callback	./test/fake_user.c	/^void my_subscribe_callback(struct mosquitto *mosq, void *userdata, int mid, int qos_count, const int *granted_qos){$/;"	f
name	./src/mosquitto_broker.h	/^	char *name;$/;"	m	struct:_mqtt3_bridge
next	./lib/mosquitto_internal.h	/^	struct _mosquitto_packet *next;$/;"	m	struct:_mosquitto_packet	typeref:struct:_mosquitto_packet::_mosquitto_packet
next	./lib/mosquitto_internal.h	/^	struct mosquitto_message_all *next;$/;"	m	struct:mosquitto_message_all	typeref:struct:mosquitto_message_all::mosquitto_message_all
next	./src/mosquitto_broker.h	/^	struct _mosquitto_acl *next;$/;"	m	struct:_mosquitto_acl	typeref:struct:_mosquitto_acl::_mosquitto_acl
next	./src/mosquitto_broker.h	/^	struct _mosquitto_acl_user *next;$/;"	m	struct:_mosquitto_acl_user	typeref:struct:_mosquitto_acl_user::_mosquitto_acl_user
next	./src/mosquitto_broker.h	/^	struct _mosquitto_subhier *next;$/;"	m	struct:_mosquitto_subhier	typeref:struct:_mosquitto_subhier::_mosquitto_subhier
next	./src/mosquitto_broker.h	/^	struct _mosquitto_subleaf *next;$/;"	m	struct:_mosquitto_subleaf	typeref:struct:_mosquitto_subleaf::_mosquitto_subleaf
next	./src/mosquitto_broker.h	/^	struct _mosquitto_waiting_auth_list * next ;$/;"	m	struct:_mosquitto_waiting_auth_list	typeref:struct:_mosquitto_waiting_auth_list::_mosquitto_waiting_auth_list
next	./src/mosquitto_broker.h	/^	struct mosquitto_client_msg *next;$/;"	m	struct:mosquitto_client_msg	typeref:struct:mosquitto_client_msg::mosquitto_client_msg
next	./src/mosquitto_broker.h	/^	struct mosquitto_msg_store *next;$/;"	m	struct:mosquitto_msg_store	typeref:struct:mosquitto_msg_store::mosquitto_msg_store
next	./src/subs.c	/^	struct _sub_token *next;$/;"	m	struct:_sub_token	typeref:struct:_sub_token::_sub_token	file:
next	./src/uthash.h	/^   void *next;                       \/* next element in app order      *\/$/;"	m	struct:UT_hash_handle
next	./test/qos.c	/^	struct msg_list *next;$/;"	m	struct:msg_list	typeref:struct:msg_list::msg_list	file:
no_retain	./client/sub_client.c	/^	bool no_retain;$/;"	m	struct:userdata	file:
noexpand	./src/uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table
nonideal_items	./src/uthash.h	/^   unsigned nonideal_items;$/;"	m	struct:UT_hash_table
notification_topic	./src/mosquitto_broker.h	/^	char *notification_topic;$/;"	m	struct:_mqtt3_bridge
notifications	./src/mosquitto_broker.h	/^	bool notifications;$/;"	m	struct:_mqtt3_bridge
num_buckets	./src/uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table
num_items	./src/uthash.h	/^   unsigned num_items;$/;"	m	struct:UT_hash_table
on_connect	./lib/cpp/mosquittopp.h	/^		virtual void on_connect(int rc) {return;};$/;"	f	class:mosqpp::mosquittopp
on_connect	./lib/mosquitto_internal.h	/^	void (*on_connect)(struct mosquitto *, void *userdata, int rc);$/;"	m	struct:mosquitto
on_connect	./test/lib/c/01-con-discon-success.c	/^void on_connect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_connect	./test/lib/c/01-keepalive-pingreq.c	/^void on_connect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_connect	./test/lib/c/02-subscribe-qos0.c	/^void on_connect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_connect	./test/lib/c/02-subscribe-qos1.c	/^void on_connect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_connect	./test/lib/c/02-subscribe-qos2.c	/^void on_connect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_connect	./test/lib/c/02-unsubscribe.c	/^void on_connect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_connect	./test/lib/c/03-publish-b2c-qos1.c	/^void on_connect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_connect	./test/lib/c/03-publish-b2c-qos2.c	/^void on_connect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_connect	./test/lib/c/03-publish-c2b-qos1-disconnect.c	/^void on_connect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_connect	./test/lib/c/03-publish-c2b-qos1-timeout.c	/^void on_connect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_connect	./test/lib/c/03-publish-c2b-qos2-disconnect.c	/^void on_connect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_connect	./test/lib/c/03-publish-c2b-qos2-timeout.c	/^void on_connect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_connect	./test/lib/c/03-publish-c2b-qos2.c	/^void on_connect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_connect	./test/lib/c/03-publish-qos0-no-payload.c	/^void on_connect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_connect	./test/lib/c/03-publish-qos0.c	/^void on_connect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_connect	./test/lib/c/04-retain-qos0.c	/^void on_connect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_disconnect	./lib/cpp/mosquittopp.h	/^		virtual void on_disconnect(int rc) {return;};$/;"	f	class:mosqpp::mosquittopp
on_disconnect	./lib/mosquitto_internal.h	/^	void (*on_disconnect)(struct mosquitto *, void *userdata, int rc);$/;"	m	struct:mosquitto
on_disconnect	./test/lib/c/01-con-discon-success.c	/^void on_disconnect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_disconnect	./test/lib/c/02-subscribe-qos0.c	/^void on_disconnect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_disconnect	./test/lib/c/02-subscribe-qos1.c	/^void on_disconnect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_disconnect	./test/lib/c/02-subscribe-qos2.c	/^void on_disconnect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_disconnect	./test/lib/c/02-unsubscribe.c	/^void on_disconnect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_disconnect	./test/lib/c/03-publish-c2b-qos1-disconnect.c	/^void on_disconnect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_disconnect	./test/lib/c/03-publish-c2b-qos1-timeout.c	/^void on_disconnect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_disconnect	./test/lib/c/03-publish-c2b-qos2-disconnect.c	/^void on_disconnect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_disconnect	./test/lib/c/03-publish-c2b-qos2-timeout.c	/^void on_disconnect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_disconnect	./test/lib/c/03-publish-c2b-qos2.c	/^void on_disconnect(struct mosquitto *mosq, void *obj, int rc)$/;"	f
on_disconnect	./test/qos.c	/^void on_disconnect(void *obj)$/;"	f
on_error	./lib/cpp/mosquittopp.h	/^		virtual void on_error() {return;};$/;"	f	class:mosqpp::mosquittopp
on_log	./lib/cpp/mosquittopp.h	/^		virtual void on_log(int level, const char *str) {return;};$/;"	f	class:mosqpp::mosquittopp
on_log	./lib/mosquitto_internal.h	/^	void (*on_log)(struct mosquitto *, void *userdata, int level, const char *str);$/;"	m	struct:mosquitto
on_message	./lib/cpp/mosquittopp.h	/^		virtual void on_message(const struct mosquitto_message *message) {return;};$/;"	f	class:mosqpp::mosquittopp
on_message	./lib/mosquitto_internal.h	/^	void (*on_message)(struct mosquitto *, void *userdata, const struct mosquitto_message *message);$/;"	m	struct:mosquitto
on_message	./test/lib/c/03-publish-b2c-qos1.c	/^void on_message(struct mosquitto *mosq, void *obj, const struct mosquitto_message *msg)$/;"	f
on_message	./test/lib/c/03-publish-b2c-qos2.c	/^void on_message(struct mosquitto *mosq, void *obj, const struct mosquitto_message *msg)$/;"	f
on_message	./test/qos.c	/^void on_message(void *obj, const struct mosquitto_message *msg)$/;"	f
on_publish	./lib/cpp/mosquittopp.h	/^		virtual void on_publish(int mid) {return;};$/;"	f	class:mosqpp::mosquittopp
on_publish	./lib/mosquitto_internal.h	/^	void (*on_publish)(struct mosquitto *, void *userdata, int mid);$/;"	m	struct:mosquitto
on_publish	./test/lib/c/03-publish-c2b-qos1-disconnect.c	/^void on_publish(struct mosquitto *mosq, void *obj, int mid)$/;"	f
on_publish	./test/lib/c/03-publish-c2b-qos1-timeout.c	/^void on_publish(struct mosquitto *mosq, void *obj, int mid)$/;"	f
on_publish	./test/lib/c/03-publish-c2b-qos2-disconnect.c	/^void on_publish(struct mosquitto *mosq, void *obj, int mid)$/;"	f
on_publish	./test/lib/c/03-publish-c2b-qos2-timeout.c	/^void on_publish(struct mosquitto *mosq, void *obj, int mid)$/;"	f
on_publish	./test/lib/c/03-publish-c2b-qos2.c	/^void on_publish(struct mosquitto *mosq, void *obj, int mid)$/;"	f
on_publish	./test/lib/c/03-publish-qos0-no-payload.c	/^void on_publish(struct mosquitto *mosq, void *obj, int mid)$/;"	f
on_publish	./test/lib/c/03-publish-qos0.c	/^void on_publish(struct mosquitto *mosq, void *obj, int mid)$/;"	f
on_publish	./test/qos.c	/^void on_publish(void *obj, uint16_t mid)$/;"	f
on_subscribe	./lib/cpp/mosquittopp.h	/^		virtual void on_subscribe(int mid, int qos_count, const int *granted_qos) {return;};$/;"	f	class:mosqpp::mosquittopp
on_subscribe	./lib/mosquitto_internal.h	/^	void (*on_subscribe)(struct mosquitto *, void *userdata, int mid, int qos_count, const int *granted_qos);$/;"	m	struct:mosquitto
on_subscribe	./test/lib/c/02-subscribe-qos0.c	/^void on_subscribe(struct mosquitto *mosq, void *obj, int mid, int qos_count, const int *granted_qos)$/;"	f
on_subscribe	./test/lib/c/02-subscribe-qos1.c	/^void on_subscribe(struct mosquitto *mosq, void *obj, int mid, int qos_count, const int *granted_qos)$/;"	f
on_subscribe	./test/lib/c/02-subscribe-qos2.c	/^void on_subscribe(struct mosquitto *mosq, void *obj, int mid, int qos_count, const int *granted_qos)$/;"	f
on_subscribe	./test/qos.c	/^void on_subscribe(void *obj, uint16_t mid, int qos_count, const uint8_t *granted_qos)$/;"	f
on_unsubscribe	./lib/cpp/mosquittopp.h	/^		virtual void on_unsubscribe(int mid) {return;};$/;"	f	class:mosqpp::mosquittopp
on_unsubscribe	./lib/mosquitto_internal.h	/^	void (*on_unsubscribe)(struct mosquitto *, void *userdata, int mid);$/;"	m	struct:mosquitto
on_unsubscribe	./test/lib/c/02-unsubscribe.c	/^void on_unsubscribe(struct mosquitto *mosq, void *obj, int mid)$/;"	f
out_packet	./lib/mosquitto_internal.h	/^	struct _mosquitto_packet *out_packet;\/\/待发送出去的包的链表$/;"	m	struct:mosquitto	typeref:struct:mosquitto::_mosquitto_packet
out_packet_last	./lib/mosquitto_internal.h	/^	struct _mosquitto_packet *out_packet_last;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::_mosquitto_packet
out_packet_last	./lib/mosquitto_internal.h	/^	struct _mosquitto_packet *out_packet_last;\/\/快速指向待输出数据列表的索引，mosq->out_packet_last->next = packet$/;"	m	struct:mosquitto	typeref:struct:mosquitto::_mosquitto_packet
out_packet_mutex	./lib/mosquitto_internal.h	/^	pthread_mutex_t out_packet_mutex;$/;"	m	struct:mosquitto
output_new_password	./src/mosquitto_passwd.c	/^int output_new_password(FILE *fptr, const char *username, const char *password)$/;"	f
packet_length	./lib/mosquitto_internal.h	/^	uint32_t packet_length;$/;"	m	struct:_mosquitto_packet
password	./client/pub_client.c	/^static char *password = NULL;$/;"	v	file:
password	./client/sub_client.c	/^	char *password;$/;"	m	struct:userdata	file:
password	./lib/mosquitto_internal.h	/^	char *password;$/;"	m	struct:mosquitto
password	./src/mosquitto_broker.h	/^	char *password;$/;"	m	struct:_mosquitto_unpwd
password	./src/mosquitto_broker.h	/^	char *password;$/;"	m	struct:_mqtt3_bridge
password_file	./src/mosquitto_broker.h	/^	char *password_file;$/;"	m	struct:mqtt3_config
payload	./lib/mosquitto.h	/^	void *payload;$/;"	m	struct:mosquitto_message
payload	./lib/mosquitto_internal.h	/^	uint8_t *payload;$/;"	m	struct:_mosquitto_packet
payloadlen	./lib/mosquitto.h	/^	int payloadlen;$/;"	m	struct:mosquitto_message
persistence	./src/mosquitto_broker.h	/^	bool persistence;$/;"	m	struct:mqtt3_config
persistence_changes	./src/mosquitto_broker.h	/^	int persistence_changes;\/\/如果autosave_on_changes设置了，那么这里用来累积计数修改了多少条数据，达到autosave_interval后就会持久化$/;"	m	struct:mosquitto_db
persistence_file	./src/mosquitto_broker.h	/^	char *persistence_file;$/;"	m	struct:mqtt3_config
persistence_filepath	./src/mosquitto_broker.h	/^	char *persistence_filepath;$/;"	m	struct:mqtt3_config
persistence_location	./src/mosquitto_broker.h	/^	char *persistence_location;$/;"	m	struct:mqtt3_config
persistent_client_expiration	./src/mosquitto_broker.h	/^	time_t persistent_client_expiration;$/;"	m	struct:mqtt3_config
pid_file	./src/mosquitto_broker.h	/^	char *pid_file;$/;"	m	struct:mqtt3_config
ping_t	./lib/mosquitto_internal.h	/^	time_t ping_t;$/;"	m	struct:mosquitto
plugin_cleanup	./src/mosquitto_broker.h	/^	int (*plugin_cleanup)(void *user_data, struct mosquitto_auth_opt *auth_opts, int auth_opt_count);$/;"	m	struct:_mosquitto_auth_plugin
plugin_init	./src/mosquitto_broker.h	/^	int (*plugin_init)(void **user_data, struct mosquitto_auth_opt *auth_opts, int auth_opt_count);$/;"	m	struct:_mosquitto_auth_plugin
plugin_version	./src/mosquitto_broker.h	/^	int (*plugin_version)(void);$/;"	m	struct:_mosquitto_auth_plugin
pollfd_index	./lib/mosquitto_internal.h	/^	int pollfd_index;$/;"	m	struct:mosquitto
port	./lib/mosquitto_internal.h	/^	int port;$/;"	m	struct:mosquitto
port	./src/mosquitto_broker.h	/^	int port;$/;"	m	struct:bridge_address
port	./src/mosquitto_broker.h	/^	uint16_t port;$/;"	m	struct:_mqtt3_listener
pos	./lib/mosquitto_internal.h	/^	uint32_t pos;$/;"	m	struct:_mosquitto_packet
prev	./src/mosquitto_broker.h	/^	struct _mosquitto_subleaf *prev;$/;"	m	struct:_mosquitto_subleaf	typeref:struct:_mosquitto_subleaf::_mosquitto_subleaf
prev	./src/uthash.h	/^   void *prev;                       \/* prev element in app order      *\/$/;"	m	struct:UT_hash_handle
primary_retry	./src/mosquitto_broker.h	/^	time_t primary_retry;$/;"	m	struct:_mqtt3_bridge
print_error	./test/lib/c/09-util-topic-tokenise.c	/^void print_error(const char *topic, char **topics, int topic_count)$/;"	f
print_usage	./client/pub_client.c	/^void print_usage(void)$/;"	f
print_usage	./client/sub_client.c	/^void print_usage(void)$/;"	f
print_usage	./src/conf.c	/^static void print_usage(void)$/;"	f	file:
print_usage	./src/mosquitto_passwd.c	/^void print_usage(void)$/;"	f
pthread_cancel	./lib/dummypthread.h	6;"	d
pthread_create	./lib/dummypthread.h	4;"	d
pthread_join	./lib/dummypthread.h	5;"	d
pthread_mutex_destroy	./lib/dummypthread.h	9;"	d
pthread_mutex_init	./lib/dummypthread.h	8;"	d
pthread_mutex_lock	./lib/dummypthread.h	10;"	d
pthread_mutex_unlock	./lib/dummypthread.h	11;"	d
qos	./client/pub_client.c	/^static int qos = 0;$/;"	v	file:
qos	./lib/mosquitto.h	/^	int qos;$/;"	m	struct:mosquitto_message
qos	./src/mosquitto_broker.h	/^	int qos;$/;"	m	struct:_mosquitto_subleaf
qos	./src/mosquitto_broker.h	/^	int qos;$/;"	m	struct:_mqtt3_bridge_topic
qos	./src/mosquitto_broker.h	/^	int qos;$/;"	m	struct:mosquitto_client_msg
qos	./test/qos.c	/^	int qos;$/;"	m	struct:sub	file:
queue_len	./lib/mosquitto_internal.h	/^	int queue_len;$/;"	m	struct:mosquitto
queue_qos0_messages	./src/mosquitto_broker.h	/^	bool queue_qos0_messages;\/\/如果客户端挂了，qos0的消息是否保存离线记录$/;"	m	struct:mqtt3_config
quiet	./client/pub_client.c	/^static bool quiet = false;$/;"	v	file:
quiet	./client/sub_client.c	/^	bool quiet;$/;"	m	struct:userdata	file:
rand_publish	./test/qos.c	/^void rand_publish(struct mosquitto *mosq, const char *topic, int qos)$/;"	f
read_e	./src/persist.h	45;"	d
received_count	./test/qos.c	/^int received_count = 0;$/;"	v
reconnect_delay	./lib/mosquitto_internal.h	/^	unsigned int reconnect_delay;$/;"	m	struct:mosquitto
reconnect_delay_max	./lib/mosquitto_internal.h	/^	unsigned int reconnect_delay_max;$/;"	m	struct:mosquitto
reconnect_exponential_backoff	./lib/mosquitto_internal.h	/^	bool reconnect_exponential_backoff;$/;"	m	struct:mosquitto
ref_count	./src/mosquitto_broker.h	/^	int ref_count;\/\/被多少mosquitto_client_msg客户端消息引用了,如果为0，就可以删除这条消息了$/;"	m	struct:mosquitto_msg_store
remaining_count	./lib/mosquitto_internal.h	/^	uint8_t remaining_count;\/\/ remaining字段包含几个字节$/;"	m	struct:_mosquitto_packet
remaining_length	./lib/mosquitto_internal.h	/^	uint32_t remaining_length;\/\/remaining字段的表示的长度，也就是数据长度$/;"	m	struct:_mosquitto_packet
remaining_mult	./lib/mosquitto_internal.h	/^	uint32_t remaining_mult;$/;"	m	struct:_mosquitto_packet
remote_prefix	./src/mosquitto_broker.h	/^	char *remote_prefix;$/;"	m	struct:_mqtt3_bridge_topic
remote_topic	./src/mosquitto_broker.h	/^	char *remote_topic; \/* topic prefixed with remote_prefix *\/$/;"	m	struct:_mqtt3_bridge_topic
restart_t	./src/mosquitto_broker.h	/^	time_t restart_t;$/;"	m	struct:_mqtt3_bridge
restart_timeout	./src/mosquitto_broker.h	/^	int restart_timeout;$/;"	m	struct:_mqtt3_bridge
retain	./client/pub_client.c	/^static int retain = 0;$/;"	v	file:
retain	./lib/mosquitto.h	/^	bool retain;$/;"	m	struct:mosquitto_message
retain	./src/mosquitto_broker.h	/^	bool retain;$/;"	m	struct:mosquitto_client_msg
retained	./src/mosquitto_broker.h	/^	struct mosquitto_msg_store *retained;\/\/指向db->msg_store上的一条消息，在指向的时候增加了count计数的，所以不会丢掉$/;"	m	struct:_mosquitto_subhier	typeref:struct:_mosquitto_subhier::mosquitto_msg_store
retained_count	./src/mosquitto_broker.h	/^	int retained_count;$/;"	m	struct:mosquitto_db
retry_interval	./src/mosquitto_broker.h	/^	int retry_interval;$/;"	m	struct:mqtt3_config
round_robin	./src/mosquitto_broker.h	/^	bool round_robin;$/;"	m	struct:_mqtt3_bridge
run	./examples/mysql_log/mysql_log.c	/^static int run = 1;$/;"	v	file:
run	./src/mosquitto.c	/^int run;$/;"	v
run	./test/lib/c/01-con-discon-success.c	/^static int run = -1;$/;"	v	file:
run	./test/lib/c/01-keepalive-pingreq.c	/^static int run = -1;$/;"	v	file:
run	./test/lib/c/01-no-clean-session.c	/^static int run = -1;$/;"	v	file:
run	./test/lib/c/01-unpwd-set.c	/^static int run = -1;$/;"	v	file:
run	./test/lib/c/01-will-set.c	/^static int run = -1;$/;"	v	file:
run	./test/lib/c/01-will-unpwd-set.c	/^static int run = -1;$/;"	v	file:
run	./test/lib/c/02-subscribe-qos0.c	/^static int run = -1;$/;"	v	file:
run	./test/lib/c/02-subscribe-qos1.c	/^static int run = -1;$/;"	v	file:
run	./test/lib/c/02-subscribe-qos2.c	/^static int run = -1;$/;"	v	file:
run	./test/lib/c/02-unsubscribe.c	/^static int run = -1;$/;"	v	file:
run	./test/lib/c/03-publish-b2c-qos2.c	/^static int run = -1;$/;"	v	file:
run	./test/lib/c/03-publish-c2b-qos1-disconnect.c	/^static int run = -1;$/;"	v	file:
run	./test/lib/c/03-publish-c2b-qos1-timeout.c	/^static int run = -1;$/;"	v	file:
run	./test/lib/c/03-publish-c2b-qos2-disconnect.c	/^static int run = -1;$/;"	v	file:
run	./test/lib/c/03-publish-c2b-qos2-timeout.c	/^static int run = -1;$/;"	v	file:
run	./test/lib/c/03-publish-c2b-qos2.c	/^static int run = -1;$/;"	v	file:
run	./test/lib/c/03-publish-qos0-no-payload.c	/^static int run = -1;$/;"	v	file:
run	./test/lib/c/03-publish-qos0.c	/^static int run = -1;$/;"	v	file:
run	./test/lib/c/04-retain-qos0.c	/^static int run = -1;$/;"	v	file:
run	./test/msgsps_pub.c	/^static bool run = true;$/;"	v	file:
run	./test/msgsps_sub.c	/^static bool run = true;$/;"	v	file:
security_cleanup	./src/mosquitto_broker.h	/^	int (*security_cleanup)(void *user_data, struct mosquitto_auth_opt *auth_opts, int auth_opt_count, bool reload);$/;"	m	struct:_mosquitto_auth_plugin
security_init	./src/mosquitto_broker.h	/^	int (*security_init)(void *user_data, struct mosquitto_auth_opt *auth_opts, int auth_opt_count, bool reload);$/;"	m	struct:_mosquitto_auth_plugin
send_random	./test/random_client.c	/^void send_random(mqtt3_context *context, int length)$/;"	f
sent	./test/qos.c	/^	bool sent;$/;"	m	struct:msg_list	file:
sent_count	./test/qos.c	/^int sent_count = 0;$/;"	v
sent_mid	./test/lib/c/03-publish-qos0-no-payload.c	/^static int sent_mid = -1;$/;"	v	file:
sent_mid	./test/lib/c/03-publish-qos0.c	/^static int sent_mid = -1;$/;"	v	file:
signature	./src/uthash.h	/^   uint32_t signature; \/* used only to find hash tables in external analysis *\/$/;"	m	struct:UT_hash_table
sock	./lib/mosquitto_internal.h	/^	int sock;$/;"	m	struct:mosquitto
sock_count	./src/mosquitto_broker.h	/^	int sock_count;\/\/上面socks数组的个数$/;"	m	struct:_mqtt3_listener
socks	./src/mosquitto_broker.h	/^	int *socks;\/\/由于可能hostname为域名等，一条listener可能需要花费多个sock套接字句柄，所以为数组.所有的sock放在main()的局部变量listensock上面$/;"	m	struct:_mqtt3_listener
source_id	./src/mosquitto_broker.h	/^	char *source_id;$/;"	m	struct:mosquitto_msg_store
source_mid	./src/mosquitto_broker.h	/^	uint16_t source_mid;$/;"	m	struct:mosquitto_msg_store
stConnAckd	./test/random_client.c	/^	stConnAckd,$/;"	e	enum:__anon1	file:
stConnSent	./test/random_client.c	/^	stConnSent,$/;"	e	enum:__anon1	file:
stPause	./test/random_client.c	/^	stPause$/;"	e	enum:__anon1	file:
stSocketOpened	./test/random_client.c	/^	stSocketOpened,$/;"	e	enum:__anon1	file:
stStart	./test/random_client.c	/^	stStart,$/;"	e	enum:__anon1	file:
stSubAckd	./test/random_client.c	/^	stSubAckd,$/;"	e	enum:__anon1	file:
stSubSent	./test/random_client.c	/^	stSubSent,$/;"	e	enum:__anon1	file:
start	./test/msgsps_pub.c	/^static struct timeval start, stop;$/;"	v	typeref:struct:timeval	file:
start	./test/msgsps_sub.c	/^static struct timeval start, stop;$/;"	v	typeref:struct:timeval	file:
start_type	./src/mosquitto_broker.h	/^	enum mosquitto_bridge_start_type start_type;$/;"	m	struct:_mqtt3_bridge	typeref:enum:_mqtt3_bridge::mosquitto_bridge_start_type
state	./lib/mosquitto_internal.h	/^	enum mosquitto_client_state state;$/;"	m	struct:mosquitto	typeref:enum:mosquitto::mosquitto_client_state
state	./lib/mosquitto_internal.h	/^	enum mosquitto_msg_state state;$/;"	m	struct:mosquitto_message_all	typeref:enum:mosquitto_message_all::mosquitto_msg_state
state	./src/mosquitto_broker.h	/^	enum mosquitto_msg_state state;$/;"	m	struct:mosquitto_client_msg	typeref:enum:mosquitto_client_msg::mosquitto_msg_state
state	./test/random_client.c	/^static stateType state = stStart;$/;"	v	file:
stateType	./test/random_client.c	/^} stateType;$/;"	t	typeref:enum:__anon1	file:
state_mutex	./lib/mosquitto_internal.h	/^	pthread_mutex_t state_mutex;$/;"	m	struct:mosquitto
status	./client/pub_client.c	/^static int status = STATUS_CONNECTING;$/;"	v	file:
stmt	./examples/mysql_log/mysql_log.c	/^static MYSQL_STMT *stmt = NULL;$/;"	v	file:
stop	./test/msgsps_pub.c	/^static struct timeval start, stop;$/;"	v	typeref:struct:	file:
stop	./test/msgsps_sub.c	/^static struct timeval start, stop;$/;"	v	typeref:struct:	file:
store	./src/mosquitto_broker.h	/^	struct mosquitto_msg_store *store;\/\/\/指向这条消息的综合结构$/;"	m	struct:mosquitto_client_msg	typeref:struct:mosquitto_client_msg::mosquitto_msg_store
store_clean_interval	./src/mosquitto_broker.h	/^	int store_clean_interval;$/;"	m	struct:mqtt3_config
sub	./test/qos.c	/^struct sub{$/;"	s	file:
subhier_clean	./src/database.c	/^static void subhier_clean(struct _mosquitto_subhier *subhier)$/;"	f	file:
subs	./src/mosquitto_broker.h	/^	struct _mosquitto_subhier subs;\/\/树形的订阅关系列表.该链表第一个节点为正常的topic订阅节点，第二个为$SYS系统状态订阅节点$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::_mosquitto_subhier
subs	./src/mosquitto_broker.h	/^	struct _mosquitto_subleaf *subs;\/\/一个节点上订阅的客户端链表$/;"	m	struct:_mosquitto_subhier	typeref:struct:_mosquitto_subhier::_mosquitto_subleaf
subs	./test/qos.c	/^struct sub subs[3];$/;"	v	typeref:struct:sub
subscription_count	./src/mosquitto_broker.h	/^	int subscription_count;\/\/总订阅量$/;"	m	struct:mosquitto_db
sys_interval	./src/mosquitto_broker.h	/^	int sys_interval;$/;"	m	struct:mqtt3_config
tail	./src/uthash.h	/^   struct UT_hash_handle *tail; \/* tail hh in app order, for fast append    *\/$/;"	m	struct:UT_hash_table	typeref:struct:UT_hash_table::UT_hash_handle
tbl	./src/uthash.h	/^   struct UT_hash_table *tbl;$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_table
thread_id	./lib/mosquitto_internal.h	/^	pthread_t thread_id;$/;"	m	struct:mosquitto
threaded	./lib/mosquitto_internal.h	/^	bool threaded;$/;"	m	struct:mosquitto
threshold	./src/mosquitto_broker.h	/^	int threshold;$/;"	m	struct:_mqtt3_bridge
timestamp	./lib/mosquitto_internal.h	/^	time_t timestamp;$/;"	m	struct:mosquitto_message_all
timestamp	./src/mosquitto_broker.h	/^	time_t timestamp;$/;"	m	struct:mosquitto_client_msg
to_process	./lib/mosquitto_internal.h	/^	uint32_t to_process;\/\/还有这么多数据没有读取完成$/;"	m	struct:_mosquitto_packet
topic	./client/pub_client.c	/^static char *topic = NULL;$/;"	v	file:
topic	./lib/mosquitto.h	/^	char *topic;$/;"	m	struct:mosquitto_message
topic	./src/mosquitto_broker.h	/^	char *topic;$/;"	m	struct:_mosquitto_acl
topic	./src/mosquitto_broker.h	/^	char *topic;$/;"	m	struct:_mosquitto_subhier
topic	./src/mosquitto_broker.h	/^	char *topic;$/;"	m	struct:_mqtt3_bridge_topic
topic	./src/subs.c	/^	char *topic;$/;"	m	struct:_sub_token	file:
topic	./test/qos.c	/^	char *topic;$/;"	m	struct:sub	file:
topic_count	./client/sub_client.c	/^	int topic_count;$/;"	m	struct:userdata	file:
topic_count	./src/mosquitto_broker.h	/^	int topic_count;$/;"	m	struct:_mqtt3_bridge
topic_qos	./client/sub_client.c	/^	int topic_qos;$/;"	m	struct:userdata	file:
topic_remapping	./src/mosquitto_broker.h	/^	bool topic_remapping;$/;"	m	struct:_mqtt3_bridge
topics	./client/sub_client.c	/^	char **topics;$/;"	m	struct:userdata	file:
topics	./src/mosquitto_broker.h	/^	struct _mqtt3_bridge_topic *topics;$/;"	m	struct:_mqtt3_bridge	typeref:struct:_mqtt3_bridge::_mqtt3_bridge_topic
try_private	./src/mosquitto_broker.h	/^	bool try_private;$/;"	m	struct:_mqtt3_bridge
try_private_accepted	./src/mosquitto_broker.h	/^	bool try_private_accepted;$/;"	m	struct:_mqtt3_bridge
uint32_t	./src/uthash.h	/^typedef unsigned int uint32_t;$/;"	t
uint8_t	./src/uthash.h	/^typedef unsigned char uint8_t;$/;"	t
unpwd	./src/mosquitto_broker.h	/^	struct _mosquitto_unpwd *unpwd;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::_mosquitto_unpwd
unpwd_check	./src/mosquitto_broker.h	/^	int (*unpwd_check)(void *user_data, const char *username, const char *password);$/;"	m	struct:_mosquitto_auth_plugin
update_file	./src/mosquitto_passwd.c	/^int update_file(FILE *fptr, FILE *ftmp)$/;"	f
update_pwuser	./src/mosquitto_passwd.c	/^int update_pwuser(FILE *fptr, FILE *ftmp, const char *username, const char *password)$/;"	f
upgrade_outgoing_qos	./src/mosquitto_broker.h	/^	bool upgrade_outgoing_qos;\/\/是否允许强制上升QOS，比如客户端要求2，但publisher只要求0，那么如果配置为true，最终以2发送$/;"	m	struct:mqtt3_config
user	./src/mosquitto_broker.h	/^	char *user;$/;"	m	struct:mqtt3_config
user_data	./src/mosquitto_broker.h	/^	void *user_data;$/;"	m	struct:_mosquitto_auth_plugin
userdata	./client/sub_client.c	/^struct userdata {$/;"	s	file:
userdata	./lib/mosquitto_internal.h	/^	void *userdata;$/;"	m	struct:mosquitto
username	./client/pub_client.c	/^static char *username = NULL;$/;"	v	file:
username	./client/sub_client.c	/^	char *username;$/;"	m	struct:userdata	file:
username	./lib/mosquitto_internal.h	/^	char *username;$/;"	m	struct:mosquitto
username	./src/mosquitto_broker.h	/^	char *username;$/;"	m	struct:_mosquitto_acl_user
username	./src/mosquitto_broker.h	/^	char *username;$/;"	m	struct:_mosquitto_unpwd
username	./src/mosquitto_broker.h	/^	char *username;$/;"	m	struct:_mqtt3_bridge
uthash_expand_fyi	./src/uthash.h	83;"	d
uthash_fatal	./src/uthash.h	70;"	d
uthash_free	./src/uthash.h	76;"	d
uthash_malloc	./src/uthash.h	73;"	d
uthash_noexpand_fyi	./src/uthash.h	80;"	d
value	./src/mosquitto_plugin.h	/^	char *value;$/;"	m	struct:mosquitto_auth_opt
verbose	./client/sub_client.c	/^	int verbose;$/;"	m	struct:userdata	file:
verbose	./src/mosquitto_broker.h	/^	bool verbose;$/;"	m	struct:mqtt3_config
waiting_auth_list	./src/mosquitto_broker.h	/^	struct _mosquitto_waiting_auth_list *waiting_auth_list ;$/;"	m	struct:mosquitto_db	typeref:struct:mosquitto_db::_mosquitto_waiting_auth_list
waiting_auth_list_mutex	./src/mosquitto_broker.h	/^	pthread_mutex_t waiting_auth_list_mutex;$/;"	m	struct:mosquitto_db
will	./lib/mosquitto_internal.h	/^	struct mosquitto_message *will;$/;"	m	struct:mosquitto	typeref:struct:mosquitto::mosquitto_message
write_e	./src/persist.h	46;"	d
